"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+sql-common@0.41.2_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+sql-common@0.41.2_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sql-common@0.41.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sql-common/build/src/index.js":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sql-common@0.41.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sql-common/build/src/index.js ***!
  \************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addSqlCommenterComment = void 0;\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\n// NOTE: This function currently is returning false-positives\n// in cases where comment characters appear in string literals\n// (\"SELECT '-- not a comment';\" would return true, although has no comment)\nfunction hasValidSqlComment(query) {\n    const indexOpeningDashDashComment = query.indexOf('--');\n    if (indexOpeningDashDashComment >= 0) {\n        return true;\n    }\n    const indexOpeningSlashComment = query.indexOf('/*');\n    if (indexOpeningSlashComment < 0) {\n        return false;\n    }\n    const indexClosingSlashComment = query.indexOf('*/');\n    return indexOpeningDashDashComment < indexClosingSlashComment;\n}\n// sqlcommenter specification (https://google.github.io/sqlcommenter/spec/#value-serialization)\n// expects us to URL encode based on the RFC 3986 spec (https://en.wikipedia.org/wiki/Percent-encoding),\n// but encodeURIComponent does not handle some characters correctly (! ' ( ) *),\n// which means we need special handling for this\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\nfunction fixedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n}\nfunction addSqlCommenterComment(span, query) {\n    if (typeof query !== 'string' || query.length === 0) {\n        return query;\n    }\n    // As per sqlcommenter spec we shall not add a comment if there already is a comment\n    // in the query\n    if (hasValidSqlComment(query)) {\n        return query;\n    }\n    const propagator = new core_1.W3CTraceContextPropagator();\n    const headers = {};\n    propagator.inject(api_1.trace.setSpan(api_1.ROOT_CONTEXT, span), headers, api_1.defaultTextMapSetter);\n    // sqlcommenter spec requires keys in the comment to be sorted lexicographically\n    const sortedKeys = Object.keys(headers).sort();\n    if (sortedKeys.length === 0) {\n        return query;\n    }\n    const commentString = sortedKeys\n        .map(key => {\n        const encodedValue = fixedEncodeURIComponent(headers[key]);\n        return `${key}='${encodedValue}'`;\n    })\n        .join(',');\n    return `${query} /*${commentString}*/`;\n}\nexports.addSqlCommenterComment = addSqlCommenterComment;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc3FsLWNvbW1vbkAwLjQxLjJfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zcWwtY29tbW9uL2J1aWxkL3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsY0FBYyxtQkFBTyxDQUFDLGtJQUFvQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsOEpBQXFCO0FBQzVDO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLDJDQUEyQztBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsSUFBSSxJQUFJLGFBQWE7QUFDdkMsS0FBSztBQUNMO0FBQ0EsY0FBYyxPQUFPLElBQUksY0FBYztBQUN2QztBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWaXNoTGFwXFxDdXJlOFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW50ZWxlbWV0cnkrc3FsLWNvbW1vbkAwLjQxLjJfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wXFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzcWwtY29tbW9uXFxidWlsZFxcc3JjXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFkZFNxbENvbW1lbnRlckNvbW1lbnQgPSB2b2lkIDA7XG5jb25zdCBhcGlfMSA9IHJlcXVpcmUoXCJAb3BlbnRlbGVtZXRyeS9hcGlcIik7XG5jb25zdCBjb3JlXzEgPSByZXF1aXJlKFwiQG9wZW50ZWxlbWV0cnkvY29yZVwiKTtcbi8vIE5PVEU6IFRoaXMgZnVuY3Rpb24gY3VycmVudGx5IGlzIHJldHVybmluZyBmYWxzZS1wb3NpdGl2ZXNcbi8vIGluIGNhc2VzIHdoZXJlIGNvbW1lbnQgY2hhcmFjdGVycyBhcHBlYXIgaW4gc3RyaW5nIGxpdGVyYWxzXG4vLyAoXCJTRUxFQ1QgJy0tIG5vdCBhIGNvbW1lbnQnO1wiIHdvdWxkIHJldHVybiB0cnVlLCBhbHRob3VnaCBoYXMgbm8gY29tbWVudClcbmZ1bmN0aW9uIGhhc1ZhbGlkU3FsQ29tbWVudChxdWVyeSkge1xuICAgIGNvbnN0IGluZGV4T3BlbmluZ0Rhc2hEYXNoQ29tbWVudCA9IHF1ZXJ5LmluZGV4T2YoJy0tJyk7XG4gICAgaWYgKGluZGV4T3BlbmluZ0Rhc2hEYXNoQ29tbWVudCA+PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBpbmRleE9wZW5pbmdTbGFzaENvbW1lbnQgPSBxdWVyeS5pbmRleE9mKCcvKicpO1xuICAgIGlmIChpbmRleE9wZW5pbmdTbGFzaENvbW1lbnQgPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaW5kZXhDbG9zaW5nU2xhc2hDb21tZW50ID0gcXVlcnkuaW5kZXhPZignKi8nKTtcbiAgICByZXR1cm4gaW5kZXhPcGVuaW5nRGFzaERhc2hDb21tZW50IDwgaW5kZXhDbG9zaW5nU2xhc2hDb21tZW50O1xufVxuLy8gc3FsY29tbWVudGVyIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vZ29vZ2xlLmdpdGh1Yi5pby9zcWxjb21tZW50ZXIvc3BlYy8jdmFsdWUtc2VyaWFsaXphdGlvbilcbi8vIGV4cGVjdHMgdXMgdG8gVVJMIGVuY29kZSBiYXNlZCBvbiB0aGUgUkZDIDM5ODYgc3BlYyAoaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUGVyY2VudC1lbmNvZGluZyksXG4vLyBidXQgZW5jb2RlVVJJQ29tcG9uZW50IGRvZXMgbm90IGhhbmRsZSBzb21lIGNoYXJhY3RlcnMgY29ycmVjdGx5ICghICcgKCApICopLFxuLy8gd2hpY2ggbWVhbnMgd2UgbmVlZCBzcGVjaWFsIGhhbmRsaW5nIGZvciB0aGlzXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9lbmNvZGVVUklDb21wb25lbnRcbmZ1bmN0aW9uIGZpeGVkRW5jb2RlVVJJQ29tcG9uZW50KHN0cikge1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIGMgPT4gYCUke2MuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKTtcbn1cbmZ1bmN0aW9uIGFkZFNxbENvbW1lbnRlckNvbW1lbnQoc3BhbiwgcXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSAnc3RyaW5nJyB8fCBxdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5O1xuICAgIH1cbiAgICAvLyBBcyBwZXIgc3FsY29tbWVudGVyIHNwZWMgd2Ugc2hhbGwgbm90IGFkZCBhIGNvbW1lbnQgaWYgdGhlcmUgYWxyZWFkeSBpcyBhIGNvbW1lbnRcbiAgICAvLyBpbiB0aGUgcXVlcnlcbiAgICBpZiAoaGFzVmFsaWRTcWxDb21tZW50KHF1ZXJ5KSkge1xuICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgfVxuICAgIGNvbnN0IHByb3BhZ2F0b3IgPSBuZXcgY29yZV8xLlczQ1RyYWNlQ29udGV4dFByb3BhZ2F0b3IoKTtcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgcHJvcGFnYXRvci5pbmplY3QoYXBpXzEudHJhY2Uuc2V0U3BhbihhcGlfMS5ST09UX0NPTlRFWFQsIHNwYW4pLCBoZWFkZXJzLCBhcGlfMS5kZWZhdWx0VGV4dE1hcFNldHRlcik7XG4gICAgLy8gc3FsY29tbWVudGVyIHNwZWMgcmVxdWlyZXMga2V5cyBpbiB0aGUgY29tbWVudCB0byBiZSBzb3J0ZWQgbGV4aWNvZ3JhcGhpY2FsbHlcbiAgICBjb25zdCBzb3J0ZWRLZXlzID0gT2JqZWN0LmtleXMoaGVhZGVycykuc29ydCgpO1xuICAgIGlmIChzb3J0ZWRLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgfVxuICAgIGNvbnN0IGNvbW1lbnRTdHJpbmcgPSBzb3J0ZWRLZXlzXG4gICAgICAgIC5tYXAoa2V5ID0+IHtcbiAgICAgICAgY29uc3QgZW5jb2RlZFZhbHVlID0gZml4ZWRFbmNvZGVVUklDb21wb25lbnQoaGVhZGVyc1trZXldKTtcbiAgICAgICAgcmV0dXJuIGAke2tleX09JyR7ZW5jb2RlZFZhbHVlfSdgO1xuICAgIH0pXG4gICAgICAgIC5qb2luKCcsJyk7XG4gICAgcmV0dXJuIGAke3F1ZXJ5fSAvKiR7Y29tbWVudFN0cmluZ30qL2A7XG59XG5leHBvcnRzLmFkZFNxbENvbW1lbnRlckNvbW1lbnQgPSBhZGRTcWxDb21tZW50ZXJDb21tZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sql-common@0.41.2_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sql-common/build/src/index.js\n");

/***/ })

};
;