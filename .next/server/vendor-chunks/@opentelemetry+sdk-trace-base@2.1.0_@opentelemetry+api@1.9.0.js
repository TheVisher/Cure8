"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasicTracerProvider: () => (/* binding */ BasicTracerProvider),\n/* harmony export */   ForceFlushState: () => (/* binding */ ForceFlushState)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/merge.js\");\n/* harmony import */ var _opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/resources */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+resources@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/build/esm/ResourceImpl.js\");\n/* harmony import */ var _Tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Tracer */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\");\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\");\n/* harmony import */ var _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MultiSpanProcessor */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utility */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nclass BasicTracerProvider {\n    _config;\n    _tracers = new Map();\n    _resource;\n    _activeSpanProcessor;\n    constructor(config = {}) {\n        const mergedConfig = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.merge)({}, (0,_config__WEBPACK_IMPORTED_MODULE_1__.loadDefaultConfig)(), (0,_utility__WEBPACK_IMPORTED_MODULE_2__.reconfigureLimits)(config));\n        this._resource = mergedConfig.resource ?? (0,_opentelemetry_resources__WEBPACK_IMPORTED_MODULE_3__.defaultResource)();\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this._resource,\n        });\n        const spanProcessors = [];\n        if (config.spanProcessors?.length) {\n            spanProcessors.push(...config.spanProcessors);\n        }\n        this._activeSpanProcessor = new _MultiSpanProcessor__WEBPACK_IMPORTED_MODULE_4__.MultiSpanProcessor(spanProcessors);\n    }\n    getTracer(name, version, options) {\n        const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new _Tracer__WEBPACK_IMPORTED_MODULE_5__.Tracer({ name, version, schemaUrl: options?.schemaUrl }, this._config, this._resource, this._activeSpanProcessor));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    }\n    forceFlush() {\n        const timeout = this._config.forceFlushTimeoutMillis;\n        const promises = this._activeSpanProcessor['_spanProcessors'].map((spanProcessor) => {\n            return new Promise(resolve => {\n                let state;\n                const timeoutInterval = setTimeout(() => {\n                    resolve(new Error(`Span processor did not completed within timeout period of ${timeout} ms`));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(() => {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(error => {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise((resolve, reject) => {\n            Promise.all(promises)\n                .then(results => {\n                const errors = results.filter(result => result !== ForceFlushState.resolved);\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(error => reject([error]));\n        });\n    }\n    shutdown() {\n        return this._activeSpanProcessor.shutdown();\n    }\n}\n//# sourceMappingURL=BasicTracerProvider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vQmFzaWNUcmFjZXJQcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0QztBQUNlO0FBQ3pCO0FBQ1c7QUFDYTtBQUNaO0FBQ3ZDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMENBQTBDO0FBQzNDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IsNkJBQTZCLDBEQUFLLEdBQUcsRUFBRSwwREFBaUIsSUFBSSwyREFBaUI7QUFDN0Usa0RBQWtELHlFQUFlO0FBQ2pFLHVDQUF1QztBQUN2QztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxtRUFBa0I7QUFDMUQ7QUFDQTtBQUNBLHVCQUF1QixLQUFLLEdBQUcsY0FBYyxHQUFHLHlCQUF5QjtBQUN6RTtBQUNBLHVDQUF1QywyQ0FBTSxHQUFHLDhDQUE4QztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1HQUFtRyxTQUFTO0FBQzVHO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmlzaExhcFxcQ3VyZThcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEBvcGVudGVsZW1ldHJ5K3Nkay10cmFjZS1iYXNlQDIuMS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMFxcbm9kZV9tb2R1bGVzXFxAb3BlbnRlbGVtZXRyeVxcc2RrLXRyYWNlLWJhc2VcXGJ1aWxkXFxlc21cXEJhc2ljVHJhY2VyUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG5pbXBvcnQgeyBkZWZhdWx0UmVzb3VyY2UgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9yZXNvdXJjZXMnO1xuaW1wb3J0IHsgVHJhY2VyIH0gZnJvbSAnLi9UcmFjZXInO1xuaW1wb3J0IHsgbG9hZERlZmF1bHRDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBNdWx0aVNwYW5Qcm9jZXNzb3IgfSBmcm9tICcuL011bHRpU3BhblByb2Nlc3Nvcic7XG5pbXBvcnQgeyByZWNvbmZpZ3VyZUxpbWl0cyB9IGZyb20gJy4vdXRpbGl0eSc7XG5leHBvcnQgdmFyIEZvcmNlRmx1c2hTdGF0ZTtcbihmdW5jdGlvbiAoRm9yY2VGbHVzaFN0YXRlKSB7XG4gICAgRm9yY2VGbHVzaFN0YXRlW0ZvcmNlRmx1c2hTdGF0ZVtcInJlc29sdmVkXCJdID0gMF0gPSBcInJlc29sdmVkXCI7XG4gICAgRm9yY2VGbHVzaFN0YXRlW0ZvcmNlRmx1c2hTdGF0ZVtcInRpbWVvdXRcIl0gPSAxXSA9IFwidGltZW91dFwiO1xuICAgIEZvcmNlRmx1c2hTdGF0ZVtGb3JjZUZsdXNoU3RhdGVbXCJlcnJvclwiXSA9IDJdID0gXCJlcnJvclwiO1xuICAgIEZvcmNlRmx1c2hTdGF0ZVtGb3JjZUZsdXNoU3RhdGVbXCJ1bnJlc29sdmVkXCJdID0gM10gPSBcInVucmVzb2x2ZWRcIjtcbn0pKEZvcmNlRmx1c2hTdGF0ZSB8fCAoRm9yY2VGbHVzaFN0YXRlID0ge30pKTtcbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgYmFzaWMgdHJhY2VyIHByb3ZpZGVyIHdoaWNoIHBsYXRmb3JtIGxpYnJhcmllcyBjYW4gZXh0ZW5kXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNpY1RyYWNlclByb3ZpZGVyIHtcbiAgICBfY29uZmlnO1xuICAgIF90cmFjZXJzID0gbmV3IE1hcCgpO1xuICAgIF9yZXNvdXJjZTtcbiAgICBfYWN0aXZlU3BhblByb2Nlc3NvcjtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xuICAgICAgICBjb25zdCBtZXJnZWRDb25maWcgPSBtZXJnZSh7fSwgbG9hZERlZmF1bHRDb25maWcoKSwgcmVjb25maWd1cmVMaW1pdHMoY29uZmlnKSk7XG4gICAgICAgIHRoaXMuX3Jlc291cmNlID0gbWVyZ2VkQ29uZmlnLnJlc291cmNlID8/IGRlZmF1bHRSZXNvdXJjZSgpO1xuICAgICAgICB0aGlzLl9jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBtZXJnZWRDb25maWcsIHtcbiAgICAgICAgICAgIHJlc291cmNlOiB0aGlzLl9yZXNvdXJjZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHNwYW5Qcm9jZXNzb3JzID0gW107XG4gICAgICAgIGlmIChjb25maWcuc3BhblByb2Nlc3NvcnM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgc3BhblByb2Nlc3NvcnMucHVzaCguLi5jb25maWcuc3BhblByb2Nlc3NvcnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FjdGl2ZVNwYW5Qcm9jZXNzb3IgPSBuZXcgTXVsdGlTcGFuUHJvY2Vzc29yKHNwYW5Qcm9jZXNzb3JzKTtcbiAgICB9XG4gICAgZ2V0VHJhY2VyKG5hbWUsIHZlcnNpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7bmFtZX1AJHt2ZXJzaW9uIHx8ICcnfToke29wdGlvbnM/LnNjaGVtYVVybCB8fCAnJ31gO1xuICAgICAgICBpZiAoIXRoaXMuX3RyYWNlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNlcnMuc2V0KGtleSwgbmV3IFRyYWNlcih7IG5hbWUsIHZlcnNpb24sIHNjaGVtYVVybDogb3B0aW9ucz8uc2NoZW1hVXJsIH0sIHRoaXMuX2NvbmZpZywgdGhpcy5fcmVzb3VyY2UsIHRoaXMuX2FjdGl2ZVNwYW5Qcm9jZXNzb3IpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICByZXR1cm4gdGhpcy5fdHJhY2Vycy5nZXQoa2V5KTtcbiAgICB9XG4gICAgZm9yY2VGbHVzaCgpIHtcbiAgICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMuX2NvbmZpZy5mb3JjZUZsdXNoVGltZW91dE1pbGxpcztcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9hY3RpdmVTcGFuUHJvY2Vzc29yWydfc3BhblByb2Nlc3NvcnMnXS5tYXAoKHNwYW5Qcm9jZXNzb3IpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhdGU7XG4gICAgICAgICAgICAgICAgY29uc3QgdGltZW91dEludGVydmFsID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IEVycm9yKGBTcGFuIHByb2Nlc3NvciBkaWQgbm90IGNvbXBsZXRlZCB3aXRoaW4gdGltZW91dCBwZXJpb2Qgb2YgJHt0aW1lb3V0fSBtc2ApKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBGb3JjZUZsdXNoU3RhdGUudGltZW91dDtcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICBzcGFuUHJvY2Vzc29yXG4gICAgICAgICAgICAgICAgICAgIC5mb3JjZUZsdXNoKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlICE9PSBGb3JjZUZsdXNoU3RhdGUudGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBGb3JjZUZsdXNoU3RhdGUucmVzb2x2ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IEZvcmNlRmx1c2hTdGF0ZS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcylcbiAgICAgICAgICAgICAgICAudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvcnMgPSByZXN1bHRzLmZpbHRlcihyZXN1bHQgPT4gcmVzdWx0ICE9PSBGb3JjZUZsdXNoU3RhdGUucmVzb2x2ZWQpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChlcnJvciA9PiByZWplY3QoW2Vycm9yXSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmVTcGFuUHJvY2Vzc29yLnNodXRkb3duKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzaWNUcmFjZXJQcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js":
/*!********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js ***!
  \********************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultiSpanProcessor: () => (/* binding */ MultiSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nclass MultiSpanProcessor {\n    _spanProcessors;\n    constructor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    forceFlush() {\n        const promises = [];\n        for (const spanProcessor of this._spanProcessors) {\n            promises.push(spanProcessor.forceFlush());\n        }\n        return new Promise(resolve => {\n            Promise.all(promises)\n                .then(() => {\n                resolve();\n            })\n                .catch(error => {\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    }\n    onStart(span, context) {\n        for (const spanProcessor of this._spanProcessors) {\n            spanProcessor.onStart(span, context);\n        }\n    }\n    onEnd(span) {\n        for (const spanProcessor of this._spanProcessors) {\n            spanProcessor.onEnd(span);\n        }\n    }\n    shutdown() {\n        const promises = [];\n        for (const spanProcessor of this._spanProcessors) {\n            promises.push(spanProcessor.shutdown());\n        }\n        return new Promise((resolve, reject) => {\n            Promise.all(promises).then(() => {\n                resolve();\n            }, reject);\n        });\n    }\n}\n//# sourceMappingURL=MultiSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vTXVsdGlTcGFuUHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3lEO0FBQ3pEO0FBQ0EsMEJBQTBCLHFCQUFxQjtBQUMvQyxpQ0FBaUMsb0JBQW9CO0FBQ3JEO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGdCQUFnQix1RUFBa0I7QUFDbEM7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmlzaExhcFxcQ3VyZThcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEBvcGVudGVsZW1ldHJ5K3Nkay10cmFjZS1iYXNlQDIuMS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMFxcbm9kZV9tb2R1bGVzXFxAb3BlbnRlbGVtZXRyeVxcc2RrLXRyYWNlLWJhc2VcXGJ1aWxkXFxlc21cXE11bHRpU3BhblByb2Nlc3Nvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgZ2xvYmFsRXJyb3JIYW5kbGVyIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgU3BhblByb2Nlc3Nvcn0gdGhhdCBzaW1wbHkgZm9yd2FyZHMgYWxsXG4gKiByZWNlaXZlZCBldmVudHMgdG8gYSBsaXN0IG9mIHtAbGluayBTcGFuUHJvY2Vzc29yfXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNdWx0aVNwYW5Qcm9jZXNzb3Ige1xuICAgIF9zcGFuUHJvY2Vzc29ycztcbiAgICBjb25zdHJ1Y3Rvcihfc3BhblByb2Nlc3NvcnMpIHtcbiAgICAgICAgdGhpcy5fc3BhblByb2Nlc3NvcnMgPSBfc3BhblByb2Nlc3NvcnM7XG4gICAgfVxuICAgIGZvcmNlRmx1c2goKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgc3BhblByb2Nlc3NvciBvZiB0aGlzLl9zcGFuUHJvY2Vzc29ycykge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChzcGFuUHJvY2Vzc29yLmZvcmNlRmx1c2goKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBnbG9iYWxFcnJvckhhbmRsZXIoZXJyb3IgfHwgbmV3IEVycm9yKCdNdWx0aVNwYW5Qcm9jZXNzb3I6IGZvcmNlRmx1c2ggZmFpbGVkJykpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25TdGFydChzcGFuLCBjb250ZXh0KSB7XG4gICAgICAgIGZvciAoY29uc3Qgc3BhblByb2Nlc3NvciBvZiB0aGlzLl9zcGFuUHJvY2Vzc29ycykge1xuICAgICAgICAgICAgc3BhblByb2Nlc3Nvci5vblN0YXJ0KHNwYW4sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uRW5kKHNwYW4pIHtcbiAgICAgICAgZm9yIChjb25zdCBzcGFuUHJvY2Vzc29yIG9mIHRoaXMuX3NwYW5Qcm9jZXNzb3JzKSB7XG4gICAgICAgICAgICBzcGFuUHJvY2Vzc29yLm9uRW5kKHNwYW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNodXRkb3duKCkge1xuICAgICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHNwYW5Qcm9jZXNzb3Igb2YgdGhpcy5fc3BhblByb2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goc3BhblByb2Nlc3Nvci5zaHV0ZG93bigpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU11bHRpU3BhblByb2Nlc3Nvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SamplingDecision: () => (/* binding */ SamplingDecision)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nvar SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vU2FtcGxlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsWUFBWTtBQUMxRDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRDQUE0QztBQUM3QyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWaXNoTGFwXFxDdXJlOFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wXFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcU2FtcGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBBIHNhbXBsaW5nIGRlY2lzaW9uIHRoYXQgZGV0ZXJtaW5lcyBob3cgYSB7QGxpbmsgU3Bhbn0gd2lsbCBiZSByZWNvcmRlZFxuICogYW5kIGNvbGxlY3RlZC5cbiAqL1xuZXhwb3J0IHZhciBTYW1wbGluZ0RlY2lzaW9uO1xuKGZ1bmN0aW9uIChTYW1wbGluZ0RlY2lzaW9uKSB7XG4gICAgLyoqXG4gICAgICogYFNwYW4uaXNSZWNvcmRpbmcoKSA9PT0gZmFsc2VgLCBzcGFuIHdpbGwgbm90IGJlIHJlY29yZGVkIGFuZCBhbGwgZXZlbnRzXG4gICAgICogYW5kIGF0dHJpYnV0ZXMgd2lsbCBiZSBkcm9wcGVkLlxuICAgICAqL1xuICAgIFNhbXBsaW5nRGVjaXNpb25bU2FtcGxpbmdEZWNpc2lvbltcIk5PVF9SRUNPUkRcIl0gPSAwXSA9IFwiTk9UX1JFQ09SRFwiO1xuICAgIC8qKlxuICAgICAqIGBTcGFuLmlzUmVjb3JkaW5nKCkgPT09IHRydWVgLCBidXQgYFNhbXBsZWRgIGZsYWcgaW4ge0BsaW5rIFRyYWNlRmxhZ3N9XG4gICAgICogTVVTVCBOT1QgYmUgc2V0LlxuICAgICAqL1xuICAgIFNhbXBsaW5nRGVjaXNpb25bU2FtcGxpbmdEZWNpc2lvbltcIlJFQ09SRFwiXSA9IDFdID0gXCJSRUNPUkRcIjtcbiAgICAvKipcbiAgICAgKiBgU3Bhbi5pc1JlY29yZGluZygpID09PSB0cnVlYCBBTkQgYFNhbXBsZWRgIGZsYWcgaW4ge0BsaW5rIFRyYWNlRmxhZ3N9XG4gICAgICogTVVTVCBiZSBzZXQuXG4gICAgICovXG4gICAgU2FtcGxpbmdEZWNpc2lvbltTYW1wbGluZ0RlY2lzaW9uW1wiUkVDT1JEX0FORF9TQU1QTEVEXCJdID0gMl0gPSBcIlJFQ09SRF9BTkRfU0FNUExFRFwiO1xufSkoU2FtcGxpbmdEZWNpc2lvbiB8fCAoU2FtcGxpbmdEZWNpc2lvbiA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TYW1wbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpanImpl: () => (/* binding */ SpanImpl)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/status.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/performance.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js\");\n/* harmony import */ var _enums__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./enums */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * This class represents a span.\n */\nclass SpanImpl {\n    // Below properties are included to implement ReadableSpan for export\n    // purposes but are not intended to be written-to directly.\n    _spanContext;\n    kind;\n    parentSpanContext;\n    attributes = {};\n    links = [];\n    events = [];\n    startTime;\n    resource;\n    instrumentationScope;\n    _droppedAttributesCount = 0;\n    _droppedEventsCount = 0;\n    _droppedLinksCount = 0;\n    name;\n    status = {\n        code: _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.SpanStatusCode.UNSET,\n    };\n    endTime = [0, 0];\n    _ended = false;\n    _duration = [-1, -1];\n    _spanProcessor;\n    _spanLimits;\n    _attributeValueLengthLimit;\n    _performanceStartTime;\n    _performanceOffset;\n    _startTimeProvided;\n    /**\n     * Constructs a new SpanImpl instance.\n     */\n    constructor(opts) {\n        const now = Date.now();\n        this._spanContext = opts.spanContext;\n        this._performanceStartTime = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.getTimeOrigin)());\n        this._startTimeProvided = opts.startTime != null;\n        this._spanLimits = opts.spanLimits;\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        this._spanProcessor = opts.spanProcessor;\n        this.name = opts.name;\n        this.parentSpanContext = opts.parentSpanContext;\n        this.kind = opts.kind;\n        this.links = opts.links || [];\n        this.startTime = this._getTime(opts.startTime ?? now);\n        this.resource = opts.resource;\n        this.instrumentationScope = opts.scope;\n        if (opts.attributes != null) {\n            this.setAttributes(opts.attributes);\n        }\n        this._spanProcessor.onStart(this, opts.context);\n    }\n    spanContext() {\n        return this._spanContext;\n    }\n    setAttribute(key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Invalid attribute key: ${key}`);\n            return this;\n        }\n        if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isAttributeValue)(value)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Invalid attribute value set for key: ${key}`);\n            return this;\n        }\n        const { attributeCountLimit } = this._spanLimits;\n        if (attributeCountLimit !== undefined &&\n            Object.keys(this.attributes).length >= attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    }\n    setAttributes(attributes) {\n        for (const [k, v] of Object.entries(attributes)) {\n            this.setAttribute(k, v);\n        }\n        return this;\n    }\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    addEvent(name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        const { eventCountLimit } = this._spanLimits;\n        if (eventCountLimit === 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (eventCountLimit !== undefined &&\n            this.events.length >= eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.debug('Dropping extra events.');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(attributesOrStartTime)) {\n            if (!(0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInput)(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        const attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.sanitizeAttributes)(attributesOrStartTime);\n        this.events.push({\n            name,\n            attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    }\n    addLink(link) {\n        this.links.push(link);\n        return this;\n    }\n    addLinks(links) {\n        this.links.push(...links);\n        return this;\n    }\n    setStatus(status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = { ...status };\n        // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n        // undefined to avoid an incorrect type causing issues downstream.\n        if (this.status.message != null && typeof status.message !== 'string') {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Dropping invalid status.message of type '${typeof status.message}', expected 'string'`);\n            delete this.status.message;\n        }\n        return this;\n    }\n    updateName(name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    }\n    end(endTime) {\n        if (this._isSpanEnded()) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.error(`${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`);\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTimeDuration)(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Dropped ${this._droppedEventsCount} events because eventCountLimit reached`);\n        }\n        this._spanProcessor.onEnd(this);\n    }\n    _getTime(inp) {\n        if (typeof inp === 'number' && inp <= _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.hrTime)(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp);\n        }\n        if (inp instanceof Date) {\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(inp.getTime());\n        }\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.isTimeInputHrTime)(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(Date.now());\n        }\n        const msDuration = _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.otperformance.now() - this._performanceStartTime;\n        return (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.addHrTimes)(this.startTime, (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.millisToHrTime)(msDuration));\n    }\n    isRecording() {\n        return this._ended === false;\n    }\n    recordException(exception, time) {\n        const attributes = {};\n        if (typeof exception === 'string') {\n            attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_TYPE] || attributes[_opentelemetry_semantic_conventions__WEBPACK_IMPORTED_MODULE_5__.ATTR_EXCEPTION_MESSAGE]) {\n            this.addEvent(_enums__WEBPACK_IMPORTED_MODULE_6__.ExceptionEventName, attributes, time);\n        }\n        else {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Failed to record an exception ${exception}`);\n        }\n    }\n    get duration() {\n        return this._duration;\n    }\n    get ended() {\n        return this._ended;\n    }\n    get droppedAttributesCount() {\n        return this._droppedAttributesCount;\n    }\n    get droppedEventsCount() {\n        return this._droppedEventsCount;\n    }\n    get droppedLinksCount() {\n        return this._droppedLinksCount;\n    }\n    _isSpanEnded() {\n        if (this._ended) {\n            const error = new Error(`Operation attempted on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`);\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Cannot execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`, error);\n        }\n        return this._ended;\n    }\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    _truncateToLimitUtil(value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    }\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    _truncateToSize(value) {\n        const limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.diag.warn(`Attribute value limit must be positive, got ${limit}`);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(val => typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val);\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    }\n}\n//# sourceMappingURL=Span.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vU3Bhbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyRDtBQUNtSTtBQUNoRTtBQUNqRjtBQUM3QztBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw4REFBYztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyw4REFBYTtBQUNsRDtBQUNBLGdEQUFnRCxrRUFBYTtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFJLGdDQUFnQyxJQUFJO0FBQ3BEO0FBQ0E7QUFDQSxhQUFhLHFFQUFnQjtBQUM3QixZQUFZLG9EQUFJLDhDQUE4QyxJQUFJO0FBQ2xFO0FBQ0E7QUFDQSxnQkFBZ0Isc0JBQXNCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlCQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGtCQUFrQjtBQUNsQztBQUNBLFlBQVksb0RBQUk7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9EQUFJO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnRUFBVztBQUN2QixpQkFBaUIsZ0VBQVc7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsdUVBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0RBQUksa0RBQWtELHNCQUFzQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFJLFVBQVUsV0FBVyxFQUFFLDBCQUEwQixHQUFHLDBCQUEwQjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtRUFBYztBQUN2QztBQUNBLFlBQVksb0RBQUk7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9EQUFJLGlCQUFpQiwwQkFBMEI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsOERBQWE7QUFDM0Q7QUFDQTtBQUNBLG1CQUFtQiwyREFBTTtBQUN6QjtBQUNBO0FBQ0EsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0E7QUFDQSxtQkFBbUIsbUVBQWM7QUFDakM7QUFDQSxZQUFZLHNFQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1FQUFjO0FBQ2pDO0FBQ0EsMkJBQTJCLDhEQUFhO0FBQ3hDLGVBQWUsK0RBQVUsaUJBQWlCLG1FQUFjO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHVGQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsb0ZBQW1CO0FBQzlDO0FBQ0E7QUFDQSwyQkFBMkIsb0ZBQW1CO0FBQzlDO0FBQ0E7QUFDQSwyQkFBMkIsdUZBQXNCO0FBQ2pEO0FBQ0E7QUFDQSwyQkFBMkIsMEZBQXlCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvRkFBbUIsZ0JBQWdCLHVGQUFzQjtBQUNoRiwwQkFBMEIsc0RBQWtCO0FBQzVDO0FBQ0E7QUFDQSxZQUFZLG9EQUFJLHVDQUF1QyxVQUFVO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLFdBQVcsMEJBQTBCLFlBQVksMEJBQTBCO0FBQ25KLFlBQVksb0RBQUksbURBQW1ELFdBQVcsMEJBQTBCLFlBQVksMEJBQTBCO0FBQzlJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEZBQTBGLGlDQUFpQztBQUMzSCx3Q0FBd0MsaUNBQWlDO0FBQ3pFO0FBQ0E7QUFDQSxtRUFBbUUsaUNBQWlDO0FBQ3BHO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0RBQUkscURBQXFELE1BQU07QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZpc2hMYXBcXEN1cmU4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3BlbnRlbGVtZXRyeStzZGstdHJhY2UtYmFzZUAyLjEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxTcGFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBkaWFnLCBTcGFuU3RhdHVzQ29kZSwgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgYWRkSHJUaW1lcywgbWlsbGlzVG9IclRpbWUsIGdldFRpbWVPcmlnaW4sIGhyVGltZSwgaHJUaW1lRHVyYXRpb24sIGlzQXR0cmlidXRlVmFsdWUsIGlzVGltZUlucHV0LCBpc1RpbWVJbnB1dEhyVGltZSwgb3RwZXJmb3JtYW5jZSwgc2FuaXRpemVBdHRyaWJ1dGVzLCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2NvcmUnO1xuaW1wb3J0IHsgQVRUUl9FWENFUFRJT05fTUVTU0FHRSwgQVRUUl9FWENFUFRJT05fU1RBQ0tUUkFDRSwgQVRUUl9FWENFUFRJT05fVFlQRSwgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9zZW1hbnRpYy1jb252ZW50aW9ucyc7XG5pbXBvcnQgeyBFeGNlcHRpb25FdmVudE5hbWUgfSBmcm9tICcuL2VudW1zJztcbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgc3Bhbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFNwYW5JbXBsIHtcbiAgICAvLyBCZWxvdyBwcm9wZXJ0aWVzIGFyZSBpbmNsdWRlZCB0byBpbXBsZW1lbnQgUmVhZGFibGVTcGFuIGZvciBleHBvcnRcbiAgICAvLyBwdXJwb3NlcyBidXQgYXJlIG5vdCBpbnRlbmRlZCB0byBiZSB3cml0dGVuLXRvIGRpcmVjdGx5LlxuICAgIF9zcGFuQ29udGV4dDtcbiAgICBraW5kO1xuICAgIHBhcmVudFNwYW5Db250ZXh0O1xuICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICBsaW5rcyA9IFtdO1xuICAgIGV2ZW50cyA9IFtdO1xuICAgIHN0YXJ0VGltZTtcbiAgICByZXNvdXJjZTtcbiAgICBpbnN0cnVtZW50YXRpb25TY29wZTtcbiAgICBfZHJvcHBlZEF0dHJpYnV0ZXNDb3VudCA9IDA7XG4gICAgX2Ryb3BwZWRFdmVudHNDb3VudCA9IDA7XG4gICAgX2Ryb3BwZWRMaW5rc0NvdW50ID0gMDtcbiAgICBuYW1lO1xuICAgIHN0YXR1cyA9IHtcbiAgICAgICAgY29kZTogU3BhblN0YXR1c0NvZGUuVU5TRVQsXG4gICAgfTtcbiAgICBlbmRUaW1lID0gWzAsIDBdO1xuICAgIF9lbmRlZCA9IGZhbHNlO1xuICAgIF9kdXJhdGlvbiA9IFstMSwgLTFdO1xuICAgIF9zcGFuUHJvY2Vzc29yO1xuICAgIF9zcGFuTGltaXRzO1xuICAgIF9hdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0O1xuICAgIF9wZXJmb3JtYW5jZVN0YXJ0VGltZTtcbiAgICBfcGVyZm9ybWFuY2VPZmZzZXQ7XG4gICAgX3N0YXJ0VGltZVByb3ZpZGVkO1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgU3BhbkltcGwgaW5zdGFuY2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLl9zcGFuQ29udGV4dCA9IG9wdHMuc3BhbkNvbnRleHQ7XG4gICAgICAgIHRoaXMuX3BlcmZvcm1hbmNlU3RhcnRUaW1lID0gb3RwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgdGhpcy5fcGVyZm9ybWFuY2VPZmZzZXQgPVxuICAgICAgICAgICAgbm93IC0gKHRoaXMuX3BlcmZvcm1hbmNlU3RhcnRUaW1lICsgZ2V0VGltZU9yaWdpbigpKTtcbiAgICAgICAgdGhpcy5fc3RhcnRUaW1lUHJvdmlkZWQgPSBvcHRzLnN0YXJ0VGltZSAhPSBudWxsO1xuICAgICAgICB0aGlzLl9zcGFuTGltaXRzID0gb3B0cy5zcGFuTGltaXRzO1xuICAgICAgICB0aGlzLl9hdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0ID1cbiAgICAgICAgICAgIHRoaXMuX3NwYW5MaW1pdHMuYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdCB8fCAwO1xuICAgICAgICB0aGlzLl9zcGFuUHJvY2Vzc29yID0gb3B0cy5zcGFuUHJvY2Vzc29yO1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRzLm5hbWU7XG4gICAgICAgIHRoaXMucGFyZW50U3BhbkNvbnRleHQgPSBvcHRzLnBhcmVudFNwYW5Db250ZXh0O1xuICAgICAgICB0aGlzLmtpbmQgPSBvcHRzLmtpbmQ7XG4gICAgICAgIHRoaXMubGlua3MgPSBvcHRzLmxpbmtzIHx8IFtdO1xuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHRoaXMuX2dldFRpbWUob3B0cy5zdGFydFRpbWUgPz8gbm93KTtcbiAgICAgICAgdGhpcy5yZXNvdXJjZSA9IG9wdHMucmVzb3VyY2U7XG4gICAgICAgIHRoaXMuaW5zdHJ1bWVudGF0aW9uU2NvcGUgPSBvcHRzLnNjb3BlO1xuICAgICAgICBpZiAob3B0cy5hdHRyaWJ1dGVzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlcyhvcHRzLmF0dHJpYnV0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NwYW5Qcm9jZXNzb3Iub25TdGFydCh0aGlzLCBvcHRzLmNvbnRleHQpO1xuICAgIH1cbiAgICBzcGFuQ29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NwYW5Db250ZXh0O1xuICAgIH1cbiAgICBzZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB0aGlzLl9pc1NwYW5FbmRlZCgpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkaWFnLndhcm4oYEludmFsaWQgYXR0cmlidXRlIGtleTogJHtrZXl9YCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXR0cmlidXRlVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgICBkaWFnLndhcm4oYEludmFsaWQgYXR0cmlidXRlIHZhbHVlIHNldCBmb3Iga2V5OiAke2tleX1gKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgYXR0cmlidXRlQ291bnRMaW1pdCB9ID0gdGhpcy5fc3BhbkxpbWl0cztcbiAgICAgICAgaWYgKGF0dHJpYnV0ZUNvdW50TGltaXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5hdHRyaWJ1dGVzKS5sZW5ndGggPj0gYXR0cmlidXRlQ291bnRMaW1pdCAmJlxuICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmF0dHJpYnV0ZXMsIGtleSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2Ryb3BwZWRBdHRyaWJ1dGVzQ291bnQrKztcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXR0cmlidXRlc1trZXldID0gdGhpcy5fdHJ1bmNhdGVUb1NpemUodmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0QXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShrLCB2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBTcGFuIE5hbWVcbiAgICAgKiBAcGFyYW0gW2F0dHJpYnV0ZXNPclN0YXJ0VGltZV0gU3BhbiBhdHRyaWJ1dGVzIG9yIHN0YXJ0IHRpbWVcbiAgICAgKiAgICAgaWYgdHlwZSBpcyB7QHR5cGUgVGltZUlucHV0fSBhbmQgM3JkIHBhcmFtIGlzIHVuZGVmaW5lZFxuICAgICAqIEBwYXJhbSBbdGltZVN0YW1wXSBTcGVjaWZpZWQgdGltZSBzdGFtcCBmb3IgdGhlIGV2ZW50XG4gICAgICovXG4gICAgYWRkRXZlbnQobmFtZSwgYXR0cmlidXRlc09yU3RhcnRUaW1lLCB0aW1lU3RhbXApIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzU3BhbkVuZGVkKCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgY29uc3QgeyBldmVudENvdW50TGltaXQgfSA9IHRoaXMuX3NwYW5MaW1pdHM7XG4gICAgICAgIGlmIChldmVudENvdW50TGltaXQgPT09IDApIHtcbiAgICAgICAgICAgIGRpYWcud2FybignTm8gZXZlbnRzIGFsbG93ZWQuJyk7XG4gICAgICAgICAgICB0aGlzLl9kcm9wcGVkRXZlbnRzQ291bnQrKztcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudENvdW50TGltaXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5ldmVudHMubGVuZ3RoID49IGV2ZW50Q291bnRMaW1pdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Ryb3BwZWRFdmVudHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpYWcuZGVidWcoJ0Ryb3BwaW5nIGV4dHJhIGV2ZW50cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLl9kcm9wcGVkRXZlbnRzQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUaW1lSW5wdXQoYXR0cmlidXRlc09yU3RhcnRUaW1lKSkge1xuICAgICAgICAgICAgaWYgKCFpc1RpbWVJbnB1dCh0aW1lU3RhbXApKSB7XG4gICAgICAgICAgICAgICAgdGltZVN0YW1wID0gYXR0cmlidXRlc09yU3RhcnRUaW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXR0cmlidXRlc09yU3RhcnRUaW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBzYW5pdGl6ZUF0dHJpYnV0ZXMoYXR0cmlidXRlc09yU3RhcnRUaW1lKTtcbiAgICAgICAgdGhpcy5ldmVudHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgYXR0cmlidXRlcyxcbiAgICAgICAgICAgIHRpbWU6IHRoaXMuX2dldFRpbWUodGltZVN0YW1wKSxcbiAgICAgICAgICAgIGRyb3BwZWRBdHRyaWJ1dGVzQ291bnQ6IDAsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkTGluayhsaW5rKSB7XG4gICAgICAgIHRoaXMubGlua3MucHVzaChsaW5rKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZExpbmtzKGxpbmtzKSB7XG4gICAgICAgIHRoaXMubGlua3MucHVzaCguLi5saW5rcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRTdGF0dXMoc3RhdHVzKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1NwYW5FbmRlZCgpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMuc3RhdHVzID0geyAuLi5zdGF0dXMgfTtcbiAgICAgICAgLy8gV2hlbiB1c2luZyB0cnktY2F0Y2gsIHRoZSBjYXVnaHQgXCJlcnJvclwiIGlzIG9mIHR5cGUgYGFueWAuIFdoZW4gdGhlbiBhc3NpZ25pbmcgYGFueWAgdG8gYHN0YXR1cy5tZXNzYWdlYCxcbiAgICAgICAgLy8gVHlwZVNjcmlwdCB3aWxsIG5vdCBlcnJvci4gV2hpbGUgdGhpcyBjYW4gaGFwcGVuIGR1cmluZyB1c2Ugb2YgYW55IEFQSSwgaXQgaXMgbW9yZSBjb21tb24gb24gU3BhbiNzZXRTdGF0dXMoKVxuICAgICAgICAvLyBhcyBpdCdzIGxpa2VseSB1c2VkIGluIGEgY2F0Y2gtYmxvY2suIFRoZXJlZm9yZSwgd2UgdmFsaWRhdGUgaWYgYHN0YXR1cy5tZXNzYWdlYCBpcyBhY3R1YWxseSBhIHN0cmluZywgbnVsbCwgb3JcbiAgICAgICAgLy8gdW5kZWZpbmVkIHRvIGF2b2lkIGFuIGluY29ycmVjdCB0eXBlIGNhdXNpbmcgaXNzdWVzIGRvd25zdHJlYW0uXG4gICAgICAgIGlmICh0aGlzLnN0YXR1cy5tZXNzYWdlICE9IG51bGwgJiYgdHlwZW9mIHN0YXR1cy5tZXNzYWdlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGlhZy53YXJuKGBEcm9wcGluZyBpbnZhbGlkIHN0YXR1cy5tZXNzYWdlIG9mIHR5cGUgJyR7dHlwZW9mIHN0YXR1cy5tZXNzYWdlfScsIGV4cGVjdGVkICdzdHJpbmcnYCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zdGF0dXMubWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdXBkYXRlTmFtZShuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1NwYW5FbmRlZCgpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBlbmQoZW5kVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNTcGFuRW5kZWQoKSkge1xuICAgICAgICAgICAgZGlhZy5lcnJvcihgJHt0aGlzLm5hbWV9ICR7dGhpcy5fc3BhbkNvbnRleHQudHJhY2VJZH0tJHt0aGlzLl9zcGFuQ29udGV4dC5zcGFuSWR9IC0gWW91IGNhbiBvbmx5IGNhbGwgZW5kKCkgb24gYSBzcGFuIG9uY2UuYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW5kZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmVuZFRpbWUgPSB0aGlzLl9nZXRUaW1lKGVuZFRpbWUpO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGhyVGltZUR1cmF0aW9uKHRoaXMuc3RhcnRUaW1lLCB0aGlzLmVuZFRpbWUpO1xuICAgICAgICBpZiAodGhpcy5fZHVyYXRpb25bMF0gPCAwKSB7XG4gICAgICAgICAgICBkaWFnLndhcm4oJ0luY29uc2lzdGVudCBzdGFydCBhbmQgZW5kIHRpbWUsIHN0YXJ0VGltZSA+IGVuZFRpbWUuIFNldHRpbmcgc3BhbiBkdXJhdGlvbiB0byAwbXMuJywgdGhpcy5zdGFydFRpbWUsIHRoaXMuZW5kVGltZSk7XG4gICAgICAgICAgICB0aGlzLmVuZFRpbWUgPSB0aGlzLnN0YXJ0VGltZS5zbGljZSgpO1xuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBbMCwgMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2Ryb3BwZWRFdmVudHNDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGRpYWcud2FybihgRHJvcHBlZCAke3RoaXMuX2Ryb3BwZWRFdmVudHNDb3VudH0gZXZlbnRzIGJlY2F1c2UgZXZlbnRDb3VudExpbWl0IHJlYWNoZWRgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zcGFuUHJvY2Vzc29yLm9uRW5kKHRoaXMpO1xuICAgIH1cbiAgICBfZ2V0VGltZShpbnApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnAgPT09ICdudW1iZXInICYmIGlucCA8PSBvdHBlcmZvcm1hbmNlLm5vdygpKSB7XG4gICAgICAgICAgICAvLyBtdXN0IGJlIGEgcGVyZm9ybWFuY2UgdGltZXN0YW1wXG4gICAgICAgICAgICAvLyBhcHBseSBjb3JyZWN0aW9uIGFuZCBjb252ZXJ0IHRvIGhydGltZVxuICAgICAgICAgICAgcmV0dXJuIGhyVGltZShpbnAgKyB0aGlzLl9wZXJmb3JtYW5jZU9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpbnAgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gbWlsbGlzVG9IclRpbWUoaW5wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG1pbGxpc1RvSHJUaW1lKGlucC5nZXRUaW1lKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1RpbWVJbnB1dEhyVGltZShpbnApKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdGFydFRpbWVQcm92aWRlZCkge1xuICAgICAgICAgICAgLy8gaWYgdXNlciBwcm92aWRlZCBhIHRpbWUgZm9yIHRoZSBzdGFydCBtYW51YWxseVxuICAgICAgICAgICAgLy8gd2UgY2FuJ3QgdXNlIGR1cmF0aW9uIHRvIGNhbGN1bGF0ZSBldmVudC9lbmQgdGltZXNcbiAgICAgICAgICAgIHJldHVybiBtaWxsaXNUb0hyVGltZShEYXRlLm5vdygpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtc0R1cmF0aW9uID0gb3RwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMuX3BlcmZvcm1hbmNlU3RhcnRUaW1lO1xuICAgICAgICByZXR1cm4gYWRkSHJUaW1lcyh0aGlzLnN0YXJ0VGltZSwgbWlsbGlzVG9IclRpbWUobXNEdXJhdGlvbikpO1xuICAgIH1cbiAgICBpc1JlY29yZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZGVkID09PSBmYWxzZTtcbiAgICB9XG4gICAgcmVjb3JkRXhjZXB0aW9uKGV4Y2VwdGlvbiwgdGltZSkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgZXhjZXB0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYXR0cmlidXRlc1tBVFRSX0VYQ0VQVElPTl9NRVNTQUdFXSA9IGV4Y2VwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChleGNlcHRpb24uY29kZSkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNbQVRUUl9FWENFUFRJT05fVFlQRV0gPSBleGNlcHRpb24uY29kZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXhjZXB0aW9uLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW0FUVFJfRVhDRVBUSU9OX1RZUEVdID0gZXhjZXB0aW9uLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhjZXB0aW9uLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW0FUVFJfRVhDRVBUSU9OX01FU1NBR0VdID0gZXhjZXB0aW9uLm1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhjZXB0aW9uLnN0YWNrKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1tBVFRSX0VYQ0VQVElPTl9TVEFDS1RSQUNFXSA9IGV4Y2VwdGlvbi5zdGFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyB0aGVzZSBhcmUgbWluaW11bSByZXF1aXJlbWVudHMgZnJvbSBzcGVjXG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW0FUVFJfRVhDRVBUSU9OX1RZUEVdIHx8IGF0dHJpYnV0ZXNbQVRUUl9FWENFUFRJT05fTUVTU0FHRV0pIHtcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnQoRXhjZXB0aW9uRXZlbnROYW1lLCBhdHRyaWJ1dGVzLCB0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpYWcud2FybihgRmFpbGVkIHRvIHJlY29yZCBhbiBleGNlcHRpb24gJHtleGNlcHRpb259YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGR1cmF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHVyYXRpb247XG4gICAgfVxuICAgIGdldCBlbmRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZGVkO1xuICAgIH1cbiAgICBnZXQgZHJvcHBlZEF0dHJpYnV0ZXNDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Ryb3BwZWRBdHRyaWJ1dGVzQ291bnQ7XG4gICAgfVxuICAgIGdldCBkcm9wcGVkRXZlbnRzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kcm9wcGVkRXZlbnRzQ291bnQ7XG4gICAgfVxuICAgIGdldCBkcm9wcGVkTGlua3NDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Ryb3BwZWRMaW5rc0NvdW50O1xuICAgIH1cbiAgICBfaXNTcGFuRW5kZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbmRlZCkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoYE9wZXJhdGlvbiBhdHRlbXB0ZWQgb24gZW5kZWQgU3BhbiB7dHJhY2VJZDogJHt0aGlzLl9zcGFuQ29udGV4dC50cmFjZUlkfSwgc3BhbklkOiAke3RoaXMuX3NwYW5Db250ZXh0LnNwYW5JZH19YCk7XG4gICAgICAgICAgICBkaWFnLndhcm4oYENhbm5vdCBleGVjdXRlIHRoZSBvcGVyYXRpb24gb24gZW5kZWQgU3BhbiB7dHJhY2VJZDogJHt0aGlzLl9zcGFuQ29udGV4dC50cmFjZUlkfSwgc3BhbklkOiAke3RoaXMuX3NwYW5Db250ZXh0LnNwYW5JZH19YCwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmRlZDtcbiAgICB9XG4gICAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byB0cnVuY2F0ZSBnaXZlbiB2YWx1ZSB3aXRoaW4gc2l6ZVxuICAgIC8vIGZvciB2YWx1ZSB0eXBlIG9mIHN0cmluZywgd2lsbCB0cnVuY2F0ZSB0byBnaXZlbiBsaW1pdFxuICAgIC8vIGZvciB0eXBlIG9mIG5vbi1zdHJpbmcsIHdpbGwgcmV0dXJuIHNhbWUgdmFsdWVcbiAgICBfdHJ1bmNhdGVUb0xpbWl0VXRpbCh2YWx1ZSwgbGltaXQpIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA8PSBsaW1pdCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoMCwgbGltaXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgZ2l2ZW4gYXR0cmlidXRlIHZhbHVlIGlzIG9mIHR5cGUgc3RyaW5nIGFuZCBoYXMgbW9yZSBjaGFyYWN0ZXJzIHRoYW4gZ2l2ZW4ge0Bjb2RlIGF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXR9IHRoZW5cbiAgICAgKiByZXR1cm4gc3RyaW5nIHdpdGggdHJ1bmNhdGVkIHRvIHtAY29kZSBhdHRyaWJ1dGVWYWx1ZUxlbmd0aExpbWl0fSBjaGFyYWN0ZXJzXG4gICAgICpcbiAgICAgKiBJZiB0aGUgZ2l2ZW4gYXR0cmlidXRlIHZhbHVlIGlzIGFycmF5IG9mIHN0cmluZ3MgdGhlblxuICAgICAqIHJldHVybiBuZXcgYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIGVhY2ggZWxlbWVudCB0cnVuY2F0ZWQgdG8ge0Bjb2RlIGF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXR9IGNoYXJhY3RlcnNcbiAgICAgKlxuICAgICAqIE90aGVyd2lzZSByZXR1cm4gc2FtZSBBdHRyaWJ1dGUge0Bjb2RlIHZhbHVlfVxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIHRydW5jYXRlZCBhdHRyaWJ1dGUgdmFsdWUgaWYgcmVxdWlyZWQsIG90aGVyd2lzZSBzYW1lIHZhbHVlXG4gICAgICovXG4gICAgX3RydW5jYXRlVG9TaXplKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gdGhpcy5fYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdDtcbiAgICAgICAgLy8gQ2hlY2sgbGltaXRcbiAgICAgICAgaWYgKGxpbWl0IDw9IDApIHtcbiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIHZhbHVlcyBhcmUgaW52YWxpZCwgc28gZG8gbm90IHRydW5jYXRlXG4gICAgICAgICAgICBkaWFnLndhcm4oYEF0dHJpYnV0ZSB2YWx1ZSBsaW1pdCBtdXN0IGJlIHBvc2l0aXZlLCBnb3QgJHtsaW1pdH1gKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90cnVuY2F0ZVRvTGltaXRVdGlsKHZhbHVlLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXJyYXkgb2Ygc3RyaW5nc1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAodmFsID0+IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gdGhpcy5fdHJ1bmNhdGVUb0xpbWl0VXRpbCh2YWwsIGxpbWl0KSA6IHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXIgdHlwZXMsIG5vIG5lZWQgdG8gYXBwbHkgdmFsdWUgbGVuZ3RoIGxpbWl0XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TcGFuLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Tracer: () => (/* binding */ Tracer)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/span_kind.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/attributes.js\");\n/* harmony import */ var _Span__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Span */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js\");\n/* harmony import */ var _utility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utility */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n/**\n * This class represents a basic tracer.\n */\nclass Tracer {\n    _sampler;\n    _generalLimits;\n    _spanLimits;\n    _idGenerator;\n    instrumentationScope;\n    _resource;\n    _spanProcessor;\n    /**\n     * Constructs a new Tracer instance.\n     */\n    constructor(instrumentationScope, config, resource, spanProcessor) {\n        const localConfig = (0,_utility__WEBPACK_IMPORTED_MODULE_0__.mergeConfig)(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new _platform__WEBPACK_IMPORTED_MODULE_1__.RandomIdGenerator();\n        this._resource = resource;\n        this._spanProcessor = spanProcessor;\n        this.instrumentationScope = instrumentationScope;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    startSpan(name, options = {}, context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active()) {\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.deleteSpan(context);\n        }\n        const parentSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpan(context);\n        if ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.isTracingSuppressed)(context)) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug('Instrumentation suppressed, returning Noop Span');\n            const nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_6__.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        const parentSpanContext = parentSpan?.spanContext();\n        const spanId = this._idGenerator.generateSpanId();\n        let validParentSpanContext;\n        let traceId;\n        let traceState;\n        if (!parentSpanContext ||\n            !_opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            validParentSpanContext = parentSpanContext;\n        }\n        const spanKind = options.kind ?? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_7__.SpanKind.INTERNAL;\n        const links = (options.links ?? []).map(link => {\n            return {\n                context: link.context,\n                attributes: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(link.attributes),\n            };\n        });\n        const attributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(options.attributes);\n        // make sampling decision\n        const samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = samplingResult.traceState ?? traceState;\n        const traceFlags = samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.RECORD_AND_SAMPLED\n            ? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.SAMPLED\n            : _opentelemetry_api__WEBPACK_IMPORTED_MODULE_10__.TraceFlags.NONE;\n        const spanContext = { traceId, spanId, traceFlags, traceState };\n        if (samplingResult.decision === _opentelemetry_api__WEBPACK_IMPORTED_MODULE_9__.SamplingDecision.NOT_RECORD) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.debug('Recording is off, propagating context in a non-recording span');\n            const nonRecordingSpan = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        const initAttributes = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.sanitizeAttributes)(Object.assign(attributes, samplingResult.attributes));\n        const span = new _Span__WEBPACK_IMPORTED_MODULE_11__.SpanImpl({\n            resource: this._resource,\n            scope: this.instrumentationScope,\n            context,\n            spanContext,\n            name,\n            kind: spanKind,\n            links,\n            parentSpanContext: validParentSpanContext,\n            attributes: initAttributes,\n            startTime: options.startTime,\n            spanProcessor: this._spanProcessor,\n            spanLimits: this._spanLimits,\n        });\n        return span;\n    }\n    startActiveSpan(name, arg2, arg3, arg4) {\n        let opts;\n        let ctx;\n        let fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        const parentContext = ctx ?? _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.active();\n        const span = this.startSpan(name, opts, parentContext);\n        const contextWithSpanSet = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.setSpan(parentContext, span);\n        return _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.context.with(contextWithSpanSet, fn, undefined, span);\n    }\n    /** Returns the active {@link GeneralLimits}. */\n    getGeneralLimits() {\n        return this._generalLimits;\n    }\n    /** Returns the active {@link SpanLimits}. */\n    getSpanLimits() {\n        return this._spanLimits;\n    }\n}\n//# sourceMappingURL=Tracer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildSamplerFromEnv: () => (/* binding */ buildSamplerFromEnv),\n/* harmony export */   loadDefaultConfig: () => (/* binding */ loadDefaultConfig)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\");\n/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\");\n/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\nvar TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\nconst DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nfunction loadDefaultConfig() {\n    return {\n        sampler: buildSamplerFromEnv(),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n            attributeCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ?? Infinity,\n            attributeCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ?? 128,\n            linkCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_LINK_COUNT_LIMIT') ?? 128,\n            eventCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_EVENT_COUNT_LIMIT') ?? 128,\n            attributePerEventCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT') ?? 128,\n            attributePerLinkCountLimit: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT') ?? 128,\n        },\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n */\nfunction buildSamplerFromEnv() {\n    const sampler = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getStringFromEnv)('OTEL_TRACES_SAMPLER') ??\n        TracesSamplerValues.ParentBasedAlwaysOn;\n    switch (sampler) {\n        case TracesSamplerValues.AlwaysOn:\n            return new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        case TracesSamplerValues.AlwaysOff:\n            return new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n        case TracesSamplerValues.ParentBasedAlwaysOn:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__.ParentBasedSampler({\n                root: new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler(),\n            });\n        case TracesSamplerValues.ParentBasedAlwaysOff:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__.ParentBasedSampler({\n                root: new _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler(),\n            });\n        case TracesSamplerValues.TraceIdRatio:\n            return new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_4__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv());\n        case TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__.ParentBasedSampler({\n                root: new _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_4__.TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv()),\n            });\n        default:\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.error(`OTEL_TRACES_SAMPLER value \"${sampler}\" invalid, defaulting to \"${TracesSamplerValues.ParentBasedAlwaysOn}\".`);\n            return new _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_3__.ParentBasedSampler({\n                root: new _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler(),\n            });\n    }\n}\nfunction getSamplerProbabilityFromEnv() {\n    const probability = (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_TRACES_SAMPLER_ARG');\n    if (probability == null) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.error(`OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`);\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.diag.error(`OTEL_TRACES_SAMPLER_ARG=${probability} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`);\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExceptionEventName: () => (/* binding */ ExceptionEventName)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nconst ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vZW51bXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWaXNoTGFwXFxDdXJlOFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wXFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcZW51bXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIEV2ZW50IG5hbWUgZGVmaW5pdGlvbnNcbmV4cG9ydCBjb25zdCBFeGNlcHRpb25FdmVudE5hbWUgPSAnZXhjZXB0aW9uJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW1zLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js":
/*!*******************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js ***!
  \*******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessorBase: () => (/* binding */ BatchSpanProcessorBase)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context-api.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/callback.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nclass BatchSpanProcessorBase {\n    _exporter;\n    _maxExportBatchSize;\n    _maxQueueSize;\n    _scheduledDelayMillis;\n    _exportTimeoutMillis;\n    _isExporting = false;\n    _finishedSpans = [];\n    _timer;\n    _shutdownOnce;\n    _droppedSpansCount = 0;\n    constructor(_exporter, config) {\n        this._exporter = _exporter;\n        this._maxExportBatchSize =\n            typeof config?.maxExportBatchSize === 'number'\n                ? config.maxExportBatchSize\n                : ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_BSP_MAX_EXPORT_BATCH_SIZE') ?? 512);\n        this._maxQueueSize =\n            typeof config?.maxQueueSize === 'number'\n                ? config.maxQueueSize\n                : ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_BSP_MAX_QUEUE_SIZE') ?? 2048);\n        this._scheduledDelayMillis =\n            typeof config?.scheduledDelayMillis === 'number'\n                ? config.scheduledDelayMillis\n                : ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_BSP_SCHEDULE_DELAY') ?? 5000);\n        this._exportTimeoutMillis =\n            typeof config?.exportTimeoutMillis === 'number'\n                ? config.exportTimeoutMillis\n                : ((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.getNumberFromEnv)('OTEL_BSP_EXPORT_TIMEOUT') ?? 30000);\n        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    forceFlush() {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    }\n    // does nothing.\n    onStart(_span, _parentContext) { }\n    onEnd(span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    }\n    shutdown() {\n        return this._shutdownOnce.call();\n    }\n    _shutdown() {\n        return Promise.resolve()\n            .then(() => {\n            return this.onShutdown();\n        })\n            .then(() => {\n            return this._flushAll();\n        })\n            .then(() => {\n            return this._exporter.shutdown();\n        });\n    }\n    /** Add a span in the buffer. */\n    _addToBuffer(span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.debug('maxQueueSize reached, dropping spans');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_2__.diag.warn(`Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`);\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    }\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    _flushAll() {\n        return new Promise((resolve, reject) => {\n            const promises = [];\n            // calculate number of batches\n            const count = Math.ceil(this._finishedSpans.length / this._maxExportBatchSize);\n            for (let i = 0, j = count; i < j; i++) {\n                promises.push(this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(() => {\n                resolve();\n            })\n                .catch(reject);\n        });\n    }\n    _flushOneBatch() {\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            const timer = setTimeout(() => {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.with((0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_5__.suppressTracing)(_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.context.active()), () => {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                let spans;\n                if (this._finishedSpans.length <= this._maxExportBatchSize) {\n                    spans = this._finishedSpans;\n                    this._finishedSpans = [];\n                }\n                else {\n                    spans = this._finishedSpans.splice(0, this._maxExportBatchSize);\n                }\n                const doExport = () => this._exporter.export(spans, result => {\n                    clearTimeout(timer);\n                    if (result.code === _opentelemetry_core__WEBPACK_IMPORTED_MODULE_6__.ExportResultCode.SUCCESS) {\n                        resolve();\n                    }\n                    else {\n                        reject(result.error ??\n                            new Error('BatchSpanProcessor: span export failed'));\n                    }\n                });\n                let pendingResources = null;\n                for (let i = 0, len = spans.length; i < len; i++) {\n                    const span = spans[i];\n                    if (span.resource.asyncAttributesPending &&\n                        span.resource.waitForAsyncAttributes) {\n                        pendingResources ??= [];\n                        pendingResources.push(span.resource.waitForAsyncAttributes());\n                    }\n                }\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources === null) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources).then(doExport, err => {\n                        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    }\n    _maybeStartTimer() {\n        if (this._isExporting)\n            return;\n        const flush = () => {\n            this._isExporting = true;\n            this._flushOneBatch()\n                .finally(() => {\n                this._isExporting = false;\n                if (this._finishedSpans.length > 0) {\n                    this._clearTimer();\n                    this._maybeStartTimer();\n                }\n            })\n                .catch(e => {\n                this._isExporting = false;\n                (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_7__.globalErrorHandler)(e);\n            });\n        };\n        // we only wait if the queue doesn't have enough elements yet\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n            return flush();\n        }\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(() => flush(), this._scheduledDelayMillis);\n        (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_8__.unrefTimer)(this._timer);\n    }\n    _clearTimer() {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    }\n}\n//# sourceMappingURL=BatchSpanProcessorBase.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleSpanExporter: () => (/* binding */ ConsoleSpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/time.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n *\n * NOTE: This {@link SpanExporter} is intended for diagnostics use only, output rendered to the console may change at any time.\n */\n/* eslint-disable no-console */\nclass ConsoleSpanExporter {\n    /**\n     * Export spans.\n     * @param spans\n     * @param resultCallback\n     */\n    export(spans, resultCallback) {\n        return this._sendSpans(spans, resultCallback);\n    }\n    /**\n     * Shutdown the exporter.\n     */\n    shutdown() {\n        this._sendSpans([]);\n        return this.forceFlush();\n    }\n    /**\n     * Exports any pending spans in exporter\n     */\n    forceFlush() {\n        return Promise.resolve();\n    }\n    /**\n     * converts span info into more readable format\n     * @param span\n     */\n    _exportInfo(span) {\n        return {\n            resource: {\n                attributes: span.resource.attributes,\n            },\n            instrumentationScope: span.instrumentationScope,\n            traceId: span.spanContext().traceId,\n            parentSpanContext: span.parentSpanContext,\n            traceState: span.spanContext().traceState?.serialize(),\n            name: span.name,\n            id: span.spanContext().spanId,\n            kind: span.kind,\n            timestamp: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.startTime),\n            duration: (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.hrTimeToMicroseconds)(span.duration),\n            attributes: span.attributes,\n            status: span.status,\n            events: span.events,\n            links: span.links,\n        };\n    }\n    /**\n     * Showing spans in console\n     * @param spans\n     * @param done\n     */\n    _sendSpans(spans, done) {\n        for (const span of spans) {\n            console.dir(this._exportInfo(span), { depth: 3 });\n        }\n        if (done) {\n            return done({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.ExportResultCode.SUCCESS });\n        }\n    }\n}\n//# sourceMappingURL=ConsoleSpanExporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vZXhwb3J0L0NvbnNvbGVTcGFuRXhwb3J0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzhFO0FBQzlFO0FBQ0EsOEJBQThCLG9CQUFvQjtBQUNsRDtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5RUFBb0I7QUFDM0Msc0JBQXNCLHlFQUFvQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxVQUFVO0FBQzVEO0FBQ0E7QUFDQSwwQkFBMEIsTUFBTSxpRUFBZ0IsVUFBVTtBQUMxRDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWaXNoTGFwXFxDdXJlOFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wXFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcZXhwb3J0XFxDb25zb2xlU3BhbkV4cG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBFeHBvcnRSZXN1bHRDb2RlLCBoclRpbWVUb01pY3Jvc2Vjb25kcywgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9jb3JlJztcbi8qKlxuICogVGhpcyBpcyBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgU3BhbkV4cG9ydGVyfSB0aGF0IHByaW50cyBzcGFucyB0byB0aGVcbiAqIGNvbnNvbGUuIFRoaXMgY2xhc3MgY2FuIGJlIHVzZWQgZm9yIGRpYWdub3N0aWMgcHVycG9zZXMuXG4gKlxuICogTk9URTogVGhpcyB7QGxpbmsgU3BhbkV4cG9ydGVyfSBpcyBpbnRlbmRlZCBmb3IgZGlhZ25vc3RpY3MgdXNlIG9ubHksIG91dHB1dCByZW5kZXJlZCB0byB0aGUgY29uc29sZSBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5leHBvcnQgY2xhc3MgQ29uc29sZVNwYW5FeHBvcnRlciB7XG4gICAgLyoqXG4gICAgICogRXhwb3J0IHNwYW5zLlxuICAgICAqIEBwYXJhbSBzcGFuc1xuICAgICAqIEBwYXJhbSByZXN1bHRDYWxsYmFja1xuICAgICAqL1xuICAgIGV4cG9ydChzcGFucywgcmVzdWx0Q2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbmRTcGFucyhzcGFucywgcmVzdWx0Q2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaHV0ZG93biB0aGUgZXhwb3J0ZXIuXG4gICAgICovXG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHRoaXMuX3NlbmRTcGFucyhbXSk7XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmNlRmx1c2goKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhwb3J0cyBhbnkgcGVuZGluZyBzcGFucyBpbiBleHBvcnRlclxuICAgICAqL1xuICAgIGZvcmNlRmx1c2goKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogY29udmVydHMgc3BhbiBpbmZvIGludG8gbW9yZSByZWFkYWJsZSBmb3JtYXRcbiAgICAgKiBAcGFyYW0gc3BhblxuICAgICAqL1xuICAgIF9leHBvcnRJbmZvKHNwYW4pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc291cmNlOiB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogc3Bhbi5yZXNvdXJjZS5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGluc3RydW1lbnRhdGlvblNjb3BlOiBzcGFuLmluc3RydW1lbnRhdGlvblNjb3BlLFxuICAgICAgICAgICAgdHJhY2VJZDogc3Bhbi5zcGFuQ29udGV4dCgpLnRyYWNlSWQsXG4gICAgICAgICAgICBwYXJlbnRTcGFuQ29udGV4dDogc3Bhbi5wYXJlbnRTcGFuQ29udGV4dCxcbiAgICAgICAgICAgIHRyYWNlU3RhdGU6IHNwYW4uc3BhbkNvbnRleHQoKS50cmFjZVN0YXRlPy5zZXJpYWxpemUoKSxcbiAgICAgICAgICAgIG5hbWU6IHNwYW4ubmFtZSxcbiAgICAgICAgICAgIGlkOiBzcGFuLnNwYW5Db250ZXh0KCkuc3BhbklkLFxuICAgICAgICAgICAga2luZDogc3Bhbi5raW5kLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBoclRpbWVUb01pY3Jvc2Vjb25kcyhzcGFuLnN0YXJ0VGltZSksXG4gICAgICAgICAgICBkdXJhdGlvbjogaHJUaW1lVG9NaWNyb3NlY29uZHMoc3Bhbi5kdXJhdGlvbiksXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBzcGFuLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICBzdGF0dXM6IHNwYW4uc3RhdHVzLFxuICAgICAgICAgICAgZXZlbnRzOiBzcGFuLmV2ZW50cyxcbiAgICAgICAgICAgIGxpbmtzOiBzcGFuLmxpbmtzLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaG93aW5nIHNwYW5zIGluIGNvbnNvbGVcbiAgICAgKiBAcGFyYW0gc3BhbnNcbiAgICAgKiBAcGFyYW0gZG9uZVxuICAgICAqL1xuICAgIF9zZW5kU3BhbnMoc3BhbnMsIGRvbmUpIHtcbiAgICAgICAgZm9yIChjb25zdCBzcGFuIG9mIHNwYW5zKSB7XG4gICAgICAgICAgICBjb25zb2xlLmRpcih0aGlzLl9leHBvcnRJbmZvKHNwYW4pLCB7IGRlcHRoOiAzIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9uZSh7IGNvZGU6IEV4cG9ydFJlc3VsdENvZGUuU1VDQ0VTUyB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbnNvbGVTcGFuRXhwb3J0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js ***!
  \*****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InMemorySpanExporter: () => (/* binding */ InMemorySpanExporter)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nclass InMemorySpanExporter {\n    _finishedSpans = [];\n    /**\n     * Indicates if the exporter has been \"shutdown.\"\n     * When false, exported spans will not be stored in-memory.\n     */\n    _stopped = false;\n    export(spans, resultCallback) {\n        if (this._stopped)\n            return resultCallback({\n                code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.FAILED,\n                error: new Error('Exporter has been stopped'),\n            });\n        this._finishedSpans.push(...spans);\n        setTimeout(() => resultCallback({ code: _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.ExportResultCode.SUCCESS }), 0);\n    }\n    shutdown() {\n        this._stopped = true;\n        this._finishedSpans = [];\n        return this.forceFlush();\n    }\n    /**\n     * Exports any pending spans in the exporter\n     */\n    forceFlush() {\n        return Promise.resolve();\n    }\n    reset() {\n        this._finishedSpans = [];\n    }\n    getFinishedSpans() {\n        return this._finishedSpans;\n    }\n}\n//# sourceMappingURL=InMemorySpanExporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vZXhwb3J0L0luTWVtb3J5U3BhbkV4cG9ydGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3VEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpRUFBZ0I7QUFDdEM7QUFDQSxhQUFhO0FBQ2I7QUFDQSwwQ0FBMEMsTUFBTSxpRUFBZ0IsVUFBVTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZpc2hMYXBcXEN1cmU4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3BlbnRlbGVtZXRyeStzZGstdHJhY2UtYmFzZUAyLjEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxleHBvcnRcXEluTWVtb3J5U3BhbkV4cG9ydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBFeHBvcnRSZXN1bHRDb2RlIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG4vKipcbiAqIFRoaXMgY2xhc3MgY2FuIGJlIHVzZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMuIEl0IHN0b3JlcyB0aGUgZXhwb3J0ZWQgc3BhbnNcbiAqIGluIGEgbGlzdCBpbiBtZW1vcnkgdGhhdCBjYW4gYmUgcmV0cmlldmVkIHVzaW5nIHRoZSBgZ2V0RmluaXNoZWRTcGFucygpYFxuICogbWV0aG9kLlxuICovXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlTcGFuRXhwb3J0ZXIge1xuICAgIF9maW5pc2hlZFNwYW5zID0gW107XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBleHBvcnRlciBoYXMgYmVlbiBcInNodXRkb3duLlwiXG4gICAgICogV2hlbiBmYWxzZSwgZXhwb3J0ZWQgc3BhbnMgd2lsbCBub3QgYmUgc3RvcmVkIGluLW1lbW9yeS5cbiAgICAgKi9cbiAgICBfc3RvcHBlZCA9IGZhbHNlO1xuICAgIGV4cG9ydChzcGFucywgcmVzdWx0Q2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0b3BwZWQpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0Q2FsbGJhY2soe1xuICAgICAgICAgICAgICAgIGNvZGU6IEV4cG9ydFJlc3VsdENvZGUuRkFJTEVELFxuICAgICAgICAgICAgICAgIGVycm9yOiBuZXcgRXJyb3IoJ0V4cG9ydGVyIGhhcyBiZWVuIHN0b3BwZWQnKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5zLnB1c2goLi4uc3BhbnMpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlc3VsdENhbGxiYWNrKHsgY29kZTogRXhwb3J0UmVzdWx0Q29kZS5TVUNDRVNTIH0pLCAwKTtcbiAgICB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHRoaXMuX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5zID0gW107XG4gICAgICAgIHJldHVybiB0aGlzLmZvcmNlRmx1c2goKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhwb3J0cyBhbnkgcGVuZGluZyBzcGFucyBpbiB0aGUgZXhwb3J0ZXJcbiAgICAgKi9cbiAgICBmb3JjZUZsdXNoKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9maW5pc2hlZFNwYW5zID0gW107XG4gICAgfVxuICAgIGdldEZpbmlzaGVkU3BhbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maW5pc2hlZFNwYW5zO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUluTWVtb3J5U3BhbkV4cG9ydGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoopSpanProcessor: () => (/* binding */ NoopSpanProcessor)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nclass NoopSpanProcessor {\n    onStart(_span, _context) { }\n    onEnd(_span) { }\n    shutdown() {\n        return Promise.resolve();\n    }\n    forceFlush() {\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=NoopSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vZXhwb3J0L05vb3BTcGFuUHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmlzaExhcFxcQ3VyZThcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEBvcGVudGVsZW1ldHJ5K3Nkay10cmFjZS1iYXNlQDIuMS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMFxcbm9kZV9tb2R1bGVzXFxAb3BlbnRlbGVtZXRyeVxcc2RrLXRyYWNlLWJhc2VcXGJ1aWxkXFxlc21cXGV4cG9ydFxcTm9vcFNwYW5Qcm9jZXNzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKiBOby1vcCBpbXBsZW1lbnRhdGlvbiBvZiBTcGFuUHJvY2Vzc29yICovXG5leHBvcnQgY2xhc3MgTm9vcFNwYW5Qcm9jZXNzb3Ige1xuICAgIG9uU3RhcnQoX3NwYW4sIF9jb250ZXh0KSB7IH1cbiAgICBvbkVuZChfc3BhbikgeyB9XG4gICAgc2h1dGRvd24oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZm9yY2VGbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vb3BTcGFuUHJvY2Vzc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleSpanProcessor: () => (/* binding */ SimpleSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/utils/callback.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/ExportResult.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n *\n * NOTE: This {@link SpanProcessor} exports every ended span individually instead of batching spans together, which causes significant performance overhead with most exporters. For production use, please consider using the {@link BatchSpanProcessor} instead.\n */\nclass SimpleSpanProcessor {\n    _exporter;\n    _shutdownOnce;\n    _pendingExports;\n    constructor(_exporter) {\n        this._exporter = _exporter;\n        this._shutdownOnce = new _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.BindOnceFuture(this._shutdown, this);\n        this._pendingExports = new Set();\n    }\n    async forceFlush() {\n        await Promise.all(Array.from(this._pendingExports));\n        if (this._exporter.forceFlush) {\n            await this._exporter.forceFlush();\n        }\n    }\n    onStart(_span, _parentContext) { }\n    onEnd(span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_1__.TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        const pendingExport = this._doExport(span).catch(err => (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_2__.globalErrorHandler)(err));\n        // Enqueue this export to the pending list so it can be flushed by the user.\n        this._pendingExports.add(pendingExport);\n        void pendingExport.finally(() => this._pendingExports.delete(pendingExport));\n    }\n    async _doExport(span) {\n        if (span.resource.asyncAttributesPending) {\n            // Ensure resource is fully resolved before exporting.\n            await span.resource.waitForAsyncAttributes?.();\n        }\n        const result = await _opentelemetry_core__WEBPACK_IMPORTED_MODULE_3__.internal._export(this._exporter, [span]);\n        if (result.code !== _opentelemetry_core__WEBPACK_IMPORTED_MODULE_4__.ExportResultCode.SUCCESS) {\n            throw (result.error ??\n                new Error(`SimpleSpanProcessor: span export failed (status ${result})`));\n        }\n    }\n    shutdown() {\n        return this._shutdownOnce.call();\n    }\n    _shutdown() {\n        return this._exporter.shutdown();\n    }\n}\n//# sourceMappingURL=SimpleSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vZXhwb3J0L1NpbXBsZVNwYW5Qcm9jZXNzb3IuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dEO0FBQ3NEO0FBQ3RHO0FBQ0EsNkJBQTZCLHFCQUFxQixtQkFBbUI7QUFDckUsT0FBTyxvQkFBb0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQkFBcUIsNExBQTRMLDBCQUEwQjtBQUMxUDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywrREFBYztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QywwREFBVTtBQUN2RDtBQUNBO0FBQ0EsZ0VBQWdFLHVFQUFrQjtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIseURBQVE7QUFDckMsNEJBQTRCLGlFQUFnQjtBQUM1QztBQUNBLDZFQUE2RSxPQUFPO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZpc2hMYXBcXEN1cmU4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3BlbnRlbGVtZXRyeStzZGstdHJhY2UtYmFzZUAyLjEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxleHBvcnRcXFNpbXBsZVNwYW5Qcm9jZXNzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFRyYWNlRmxhZ3MgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9hcGknO1xuaW1wb3J0IHsgaW50ZXJuYWwsIEV4cG9ydFJlc3VsdENvZGUsIGdsb2JhbEVycm9ySGFuZGxlciwgQmluZE9uY2VGdXR1cmUsIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG4vKipcbiAqIEFuIGltcGxlbWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgU3BhblByb2Nlc3Nvcn0gdGhhdCBjb252ZXJ0cyB0aGUge0BsaW5rIFNwYW59XG4gKiB0byB7QGxpbmsgUmVhZGFibGVTcGFufSBhbmQgcGFzc2VzIGl0IHRvIHRoZSBjb25maWd1cmVkIGV4cG9ydGVyLlxuICpcbiAqIE9ubHkgc3BhbnMgdGhhdCBhcmUgc2FtcGxlZCBhcmUgY29udmVydGVkLlxuICpcbiAqIE5PVEU6IFRoaXMge0BsaW5rIFNwYW5Qcm9jZXNzb3J9IGV4cG9ydHMgZXZlcnkgZW5kZWQgc3BhbiBpbmRpdmlkdWFsbHkgaW5zdGVhZCBvZiBiYXRjaGluZyBzcGFucyB0b2dldGhlciwgd2hpY2ggY2F1c2VzIHNpZ25pZmljYW50IHBlcmZvcm1hbmNlIG92ZXJoZWFkIHdpdGggbW9zdCBleHBvcnRlcnMuIEZvciBwcm9kdWN0aW9uIHVzZSwgcGxlYXNlIGNvbnNpZGVyIHVzaW5nIHRoZSB7QGxpbmsgQmF0Y2hTcGFuUHJvY2Vzc29yfSBpbnN0ZWFkLlxuICovXG5leHBvcnQgY2xhc3MgU2ltcGxlU3BhblByb2Nlc3NvciB7XG4gICAgX2V4cG9ydGVyO1xuICAgIF9zaHV0ZG93bk9uY2U7XG4gICAgX3BlbmRpbmdFeHBvcnRzO1xuICAgIGNvbnN0cnVjdG9yKF9leHBvcnRlcikge1xuICAgICAgICB0aGlzLl9leHBvcnRlciA9IF9leHBvcnRlcjtcbiAgICAgICAgdGhpcy5fc2h1dGRvd25PbmNlID0gbmV3IEJpbmRPbmNlRnV0dXJlKHRoaXMuX3NodXRkb3duLCB0aGlzKTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ0V4cG9ydHMgPSBuZXcgU2V0KCk7XG4gICAgfVxuICAgIGFzeW5jIGZvcmNlRmx1c2goKSB7XG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKEFycmF5LmZyb20odGhpcy5fcGVuZGluZ0V4cG9ydHMpKTtcbiAgICAgICAgaWYgKHRoaXMuX2V4cG9ydGVyLmZvcmNlRmx1c2gpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2V4cG9ydGVyLmZvcmNlRmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvblN0YXJ0KF9zcGFuLCBfcGFyZW50Q29udGV4dCkgeyB9XG4gICAgb25FbmQoc3Bhbikge1xuICAgICAgICBpZiAodGhpcy5fc2h1dGRvd25PbmNlLmlzQ2FsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzcGFuLnNwYW5Db250ZXh0KCkudHJhY2VGbGFncyAmIFRyYWNlRmxhZ3MuU0FNUExFRCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwZW5kaW5nRXhwb3J0ID0gdGhpcy5fZG9FeHBvcnQoc3BhbikuY2F0Y2goZXJyID0+IGdsb2JhbEVycm9ySGFuZGxlcihlcnIpKTtcbiAgICAgICAgLy8gRW5xdWV1ZSB0aGlzIGV4cG9ydCB0byB0aGUgcGVuZGluZyBsaXN0IHNvIGl0IGNhbiBiZSBmbHVzaGVkIGJ5IHRoZSB1c2VyLlxuICAgICAgICB0aGlzLl9wZW5kaW5nRXhwb3J0cy5hZGQocGVuZGluZ0V4cG9ydCk7XG4gICAgICAgIHZvaWQgcGVuZGluZ0V4cG9ydC5maW5hbGx5KCgpID0+IHRoaXMuX3BlbmRpbmdFeHBvcnRzLmRlbGV0ZShwZW5kaW5nRXhwb3J0KSk7XG4gICAgfVxuICAgIGFzeW5jIF9kb0V4cG9ydChzcGFuKSB7XG4gICAgICAgIGlmIChzcGFuLnJlc291cmNlLmFzeW5jQXR0cmlidXRlc1BlbmRpbmcpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSByZXNvdXJjZSBpcyBmdWxseSByZXNvbHZlZCBiZWZvcmUgZXhwb3J0aW5nLlxuICAgICAgICAgICAgYXdhaXQgc3Bhbi5yZXNvdXJjZS53YWl0Rm9yQXN5bmNBdHRyaWJ1dGVzPy4oKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnRlcm5hbC5fZXhwb3J0KHRoaXMuX2V4cG9ydGVyLCBbc3Bhbl0pO1xuICAgICAgICBpZiAocmVzdWx0LmNvZGUgIT09IEV4cG9ydFJlc3VsdENvZGUuU1VDQ0VTUykge1xuICAgICAgICAgICAgdGhyb3cgKHJlc3VsdC5lcnJvciA/P1xuICAgICAgICAgICAgICAgIG5ldyBFcnJvcihgU2ltcGxlU3BhblByb2Nlc3Nvcjogc3BhbiBleHBvcnQgZmFpbGVkIChzdGF0dXMgJHtyZXN1bHR9KWApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzaHV0ZG93bigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NodXRkb3duT25jZS5jYWxsKCk7XG4gICAgfVxuICAgIF9zaHV0ZG93bigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4cG9ydGVyLnNodXRkb3duKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2ltcGxlU3BhblByb2Nlc3Nvci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* reexport safe */ _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_7__.AlwaysOffSampler),\n/* harmony export */   AlwaysOnSampler: () => (/* reexport safe */ _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_8__.AlwaysOnSampler),\n/* harmony export */   BasicTracerProvider: () => (/* reexport safe */ _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_0__.BasicTracerProvider),\n/* harmony export */   BatchSpanProcessor: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_1__.BatchSpanProcessor),\n/* harmony export */   ConsoleSpanExporter: () => (/* reexport safe */ _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_3__.ConsoleSpanExporter),\n/* harmony export */   InMemorySpanExporter: () => (/* reexport safe */ _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_4__.InMemorySpanExporter),\n/* harmony export */   NoopSpanProcessor: () => (/* reexport safe */ _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__.NoopSpanProcessor),\n/* harmony export */   ParentBasedSampler: () => (/* reexport safe */ _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_9__.ParentBasedSampler),\n/* harmony export */   RandomIdGenerator: () => (/* reexport safe */ _platform__WEBPACK_IMPORTED_MODULE_2__.RandomIdGenerator),\n/* harmony export */   SamplingDecision: () => (/* reexport safe */ _Sampler__WEBPACK_IMPORTED_MODULE_11__.SamplingDecision),\n/* harmony export */   SimpleSpanProcessor: () => (/* reexport safe */ _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_5__.SimpleSpanProcessor),\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* reexport safe */ _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_10__.TraceIdRatioBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _BasicTracerProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BasicTracerProvider */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js\");\n/* harmony import */ var _platform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./platform */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\");\n/* harmony import */ var _export_ConsoleSpanExporter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./export/ConsoleSpanExporter */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/ConsoleSpanExporter.js\");\n/* harmony import */ var _export_InMemorySpanExporter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./export/InMemorySpanExporter */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js\");\n/* harmony import */ var _export_SimpleSpanProcessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./export/SimpleSpanProcessor */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js\");\n/* harmony import */ var _export_NoopSpanProcessor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./export/NoopSpanProcessor */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js\");\n/* harmony import */ var _sampler_AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./sampler/AlwaysOffSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _sampler_AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sampler/AlwaysOnSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/* harmony import */ var _sampler_ParentBasedSampler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sampler/ParentBasedSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\");\n/* harmony import */ var _sampler_TraceIdRatioBasedSampler__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./sampler/TraceIdRatioBasedSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\");\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Sampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzREO0FBQ087QUFDQTtBQUNFO0FBQ0Y7QUFDSjtBQUNEO0FBQ0Y7QUFDTTtBQUNZO0FBQ2pDO0FBQzdDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZpc2hMYXBcXEN1cmU4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3BlbnRlbGVtZXRyeStzZGstdHJhY2UtYmFzZUAyLjEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZXhwb3J0IHsgQmFzaWNUcmFjZXJQcm92aWRlciB9IGZyb20gJy4vQmFzaWNUcmFjZXJQcm92aWRlcic7XG5leHBvcnQgeyBCYXRjaFNwYW5Qcm9jZXNzb3IsIFJhbmRvbUlkR2VuZXJhdG9yIH0gZnJvbSAnLi9wbGF0Zm9ybSc7XG5leHBvcnQgeyBDb25zb2xlU3BhbkV4cG9ydGVyIH0gZnJvbSAnLi9leHBvcnQvQ29uc29sZVNwYW5FeHBvcnRlcic7XG5leHBvcnQgeyBJbk1lbW9yeVNwYW5FeHBvcnRlciB9IGZyb20gJy4vZXhwb3J0L0luTWVtb3J5U3BhbkV4cG9ydGVyJztcbmV4cG9ydCB7IFNpbXBsZVNwYW5Qcm9jZXNzb3IgfSBmcm9tICcuL2V4cG9ydC9TaW1wbGVTcGFuUHJvY2Vzc29yJztcbmV4cG9ydCB7IE5vb3BTcGFuUHJvY2Vzc29yIH0gZnJvbSAnLi9leHBvcnQvTm9vcFNwYW5Qcm9jZXNzb3InO1xuZXhwb3J0IHsgQWx3YXlzT2ZmU2FtcGxlciB9IGZyb20gJy4vc2FtcGxlci9BbHdheXNPZmZTYW1wbGVyJztcbmV4cG9ydCB7IEFsd2F5c09uU2FtcGxlciB9IGZyb20gJy4vc2FtcGxlci9BbHdheXNPblNhbXBsZXInO1xuZXhwb3J0IHsgUGFyZW50QmFzZWRTYW1wbGVyIH0gZnJvbSAnLi9zYW1wbGVyL1BhcmVudEJhc2VkU2FtcGxlcic7XG5leHBvcnQgeyBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIgfSBmcm9tICcuL3NhbXBsZXIvVHJhY2VJZFJhdGlvQmFzZWRTYW1wbGVyJztcbmV4cG9ydCB7IFNhbXBsaW5nRGVjaXNpb24gfSBmcm9tICcuL1NhbXBsZXInO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js ***!
  \*********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RandomIdGenerator: () => (/* binding */ RandomIdGenerator)\n/* harmony export */ });\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\nclass RandomIdGenerator {\n    /**\n     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n     * characters corresponding to 128 bits.\n     */\n    generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n    /**\n     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n     * characters corresponding to 64 bits.\n     */\n    generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (let i = 0; i < bytes / 4; i++) {\n            // unsigned right shift drops decimal part of the number\n            // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n            SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n        }\n        // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n        for (let i = 0; i < bytes; i++) {\n            if (SHARED_BUFFER[i] > 0) {\n                break;\n            }\n            else if (i === bytes - 1) {\n                SHARED_BUFFER[bytes - 1] = 1;\n            }\n        }\n        return SHARED_BUFFER.toString('hex', 0, bytes);\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9SYW5kb21JZEdlbmVyYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsV0FBVztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZpc2hMYXBcXEN1cmU4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3BlbnRlbGVtZXRyeStzZGstdHJhY2UtYmFzZUAyLjEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxwbGF0Zm9ybVxcbm9kZVxcUmFuZG9tSWRHZW5lcmF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmNvbnN0IFNQQU5fSURfQllURVMgPSA4O1xuY29uc3QgVFJBQ0VfSURfQllURVMgPSAxNjtcbmV4cG9ydCBjbGFzcyBSYW5kb21JZEdlbmVyYXRvciB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJhbmRvbSAxNi1ieXRlIHRyYWNlIElEIGZvcm1hdHRlZC9lbmNvZGVkIGFzIGEgMzIgbG93ZXJjYXNlIGhleFxuICAgICAqIGNoYXJhY3RlcnMgY29ycmVzcG9uZGluZyB0byAxMjggYml0cy5cbiAgICAgKi9cbiAgICBnZW5lcmF0ZVRyYWNlSWQgPSBnZXRJZEdlbmVyYXRvcihUUkFDRV9JRF9CWVRFUyk7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJhbmRvbSA4LWJ5dGUgc3BhbiBJRCBmb3JtYXR0ZWQvZW5jb2RlZCBhcyBhIDE2IGxvd2VyY2FzZSBoZXhcbiAgICAgKiBjaGFyYWN0ZXJzIGNvcnJlc3BvbmRpbmcgdG8gNjQgYml0cy5cbiAgICAgKi9cbiAgICBnZW5lcmF0ZVNwYW5JZCA9IGdldElkR2VuZXJhdG9yKFNQQU5fSURfQllURVMpO1xufVxuY29uc3QgU0hBUkVEX0JVRkZFUiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShUUkFDRV9JRF9CWVRFUyk7XG5mdW5jdGlvbiBnZXRJZEdlbmVyYXRvcihieXRlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiBnZW5lcmF0ZUlkKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzIC8gNDsgaSsrKSB7XG4gICAgICAgICAgICAvLyB1bnNpZ25lZCByaWdodCBzaGlmdCBkcm9wcyBkZWNpbWFsIHBhcnQgb2YgdGhlIG51bWJlclxuICAgICAgICAgICAgLy8gaXQgaXMgcmVxdWlyZWQgYmVjYXVzZSBpZiBhIG51bWJlciBiZXR3ZWVuIDIqKjMyIGFuZCAyKiozMiAtIDEgaXMgZ2VuZXJhdGVkLCBhbiBvdXQgb2YgcmFuZ2UgZXJyb3IgaXMgdGhyb3duIGJ5IHdyaXRlVUludDMyQkVcbiAgICAgICAgICAgIFNIQVJFRF9CVUZGRVIud3JpdGVVSW50MzJCRSgoTWF0aC5yYW5kb20oKSAqIDIgKiogMzIpID4+PiAwLCBpICogNCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYnVmZmVyIGlzIGFsbCAwLCBzZXQgdGhlIGxhc3QgYnl0ZSB0byAxIHRvIGd1YXJhbnRlZSBhIHZhbGlkIHczYyBpZCBpcyBnZW5lcmF0ZWRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlczsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoU0hBUkVEX0JVRkZFUltpXSA+IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGkgPT09IGJ5dGVzIC0gMSkge1xuICAgICAgICAgICAgICAgIFNIQVJFRF9CVUZGRVJbYnl0ZXMgLSAxXSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNIQVJFRF9CVUZGRVIudG9TdHJpbmcoJ2hleCcsIDAsIGJ5dGVzKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmFuZG9tSWRHZW5lcmF0b3IuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js ***!
  \*****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchSpanProcessor: () => (/* binding */ BatchSpanProcessor)\n/* harmony export */ });\n/* harmony import */ var _export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../export/BatchSpanProcessorBase */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass BatchSpanProcessor extends _export_BatchSpanProcessorBase__WEBPACK_IMPORTED_MODULE_0__.BatchSpanProcessorBase {\n    onShutdown() { }\n}\n//# sourceMappingURL=BatchSpanProcessor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vcGxhdGZvcm0vbm9kZS9leHBvcnQvQmF0Y2hTcGFuUHJvY2Vzc29yLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dGO0FBQ3pFLGlDQUFpQyxrRkFBc0I7QUFDOUQ7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZpc2hMYXBcXEN1cmU4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3BlbnRlbGVtZXRyeStzZGstdHJhY2UtYmFzZUAyLjEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxwbGF0Zm9ybVxcbm9kZVxcZXhwb3J0XFxCYXRjaFNwYW5Qcm9jZXNzb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IEJhdGNoU3BhblByb2Nlc3NvckJhc2UgfSBmcm9tICcuLi8uLi8uLi9leHBvcnQvQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZSc7XG5leHBvcnQgY2xhc3MgQmF0Y2hTcGFuUHJvY2Vzc29yIGV4dGVuZHMgQmF0Y2hTcGFuUHJvY2Vzc29yQmFzZSB7XG4gICAgb25TaHV0ZG93bigpIHsgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmF0Y2hTcGFuUHJvY2Vzc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js":
/*!**************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOffSampler: () => (/* binding */ AlwaysOffSampler)\n/* harmony export */ });\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples no traces. */\nclass AlwaysOffSampler {\n    shouldSample() {\n        return {\n            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return 'AlwaysOffSampler';\n    }\n}\n//# sourceMappingURL=AlwaysOffSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vc2FtcGxlci9BbHdheXNPZmZTYW1wbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzhDO0FBQzlDO0FBQ087QUFDUDtBQUNBO0FBQ0Esc0JBQXNCLHNEQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWaXNoTGFwXFxDdXJlOFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wXFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcc2FtcGxlclxcQWx3YXlzT2ZmU2FtcGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgU2FtcGxpbmdEZWNpc2lvbiB9IGZyb20gJy4uL1NhbXBsZXInO1xuLyoqIFNhbXBsZXIgdGhhdCBzYW1wbGVzIG5vIHRyYWNlcy4gKi9cbmV4cG9ydCBjbGFzcyBBbHdheXNPZmZTYW1wbGVyIHtcbiAgICBzaG91bGRTYW1wbGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWNpc2lvbjogU2FtcGxpbmdEZWNpc2lvbi5OT1RfUkVDT1JELFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICdBbHdheXNPZmZTYW1wbGVyJztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbHdheXNPZmZTYW1wbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AlwaysOnSampler: () => (/* binding */ AlwaysOnSampler)\n/* harmony export */ });\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Sampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Sampler that samples all traces. */\nclass AlwaysOnSampler {\n    shouldSample() {\n        return {\n            decision: _Sampler__WEBPACK_IMPORTED_MODULE_0__.SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    }\n    toString() {\n        return 'AlwaysOnSampler';\n    }\n}\n//# sourceMappingURL=AlwaysOnSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vc2FtcGxlci9BbHdheXNPblNhbXBsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEM7QUFDOUM7QUFDTztBQUNQO0FBQ0E7QUFDQSxzQkFBc0Isc0RBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZpc2hMYXBcXEN1cmU4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3BlbnRlbGVtZXRyeStzZGstdHJhY2UtYmFzZUAyLjEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxzYW1wbGVyXFxBbHdheXNPblNhbXBsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IFNhbXBsaW5nRGVjaXNpb24gfSBmcm9tICcuLi9TYW1wbGVyJztcbi8qKiBTYW1wbGVyIHRoYXQgc2FtcGxlcyBhbGwgdHJhY2VzLiAqL1xuZXhwb3J0IGNsYXNzIEFsd2F5c09uU2FtcGxlciB7XG4gICAgc2hvdWxkU2FtcGxlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVjaXNpb246IFNhbXBsaW5nRGVjaXNpb24uUkVDT1JEX0FORF9TQU1QTEVELFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuICdBbHdheXNPblNhbXBsZXInO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFsd2F5c09uU2FtcGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js":
/*!****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js ***!
  \****************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParentBasedSampler: () => (/* binding */ ParentBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace-api.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js\");\n/* harmony import */ var _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AlwaysOffSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js\");\n/* harmony import */ var _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AlwaysOnSampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nclass ParentBasedSampler {\n    _root;\n    _remoteParentSampled;\n    _remoteParentNotSampled;\n    _localParentSampled;\n    _localParentNotSampled;\n    constructor(config) {\n        this._root = config.root;\n        if (!this._root) {\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_0__.globalErrorHandler)(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            config.remoteParentSampled ?? new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            config.remoteParentNotSampled ?? new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n        this._localParentSampled =\n            config.localParentSampled ?? new _AlwaysOnSampler__WEBPACK_IMPORTED_MODULE_1__.AlwaysOnSampler();\n        this._localParentNotSampled =\n            config.localParentNotSampled ?? new _AlwaysOffSampler__WEBPACK_IMPORTED_MODULE_2__.AlwaysOffSampler();\n    }\n    shouldSample(context, traceId, spanName, spanKind, attributes, links) {\n        const parentContext = _opentelemetry_api__WEBPACK_IMPORTED_MODULE_3__.trace.getSpanContext(context);\n        if (!parentContext || !(0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_4__.isSpanContextValid)(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & _opentelemetry_api__WEBPACK_IMPORTED_MODULE_5__.TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    toString() {\n        return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n    }\n}\n//# sourceMappingURL=ParentBasedSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vc2FtcGxlci9QYXJlbnRCYXNlZFNhbXBsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM0RTtBQUNuQjtBQUNIO0FBQ0Y7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVFQUFrQjtBQUM5Qiw2QkFBNkIsNkRBQWU7QUFDNUM7QUFDQTtBQUNBLDhDQUE4Qyw2REFBZTtBQUM3RDtBQUNBLGlEQUFpRCwrREFBZ0I7QUFDakU7QUFDQSw2Q0FBNkMsNkRBQWU7QUFDNUQ7QUFDQSxnREFBZ0QsK0RBQWdCO0FBQ2hFO0FBQ0E7QUFDQSw4QkFBOEIscURBQUs7QUFDbkMsK0JBQStCLHNFQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsMERBQVU7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsMERBQVU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixPQUFPLHNCQUFzQix3QkFBd0IscUNBQXFDLDJCQUEyQix3Q0FBd0MsdUJBQXVCLG9DQUFvQywwQkFBMEIsd0NBQXdDO0FBQ3RUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWaXNoTGFwXFxDdXJlOFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wXFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcc2FtcGxlclxcUGFyZW50QmFzZWRTYW1wbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBpc1NwYW5Db250ZXh0VmFsaWQsIFRyYWNlRmxhZ3MsIHRyYWNlLCB9IGZyb20gJ0BvcGVudGVsZW1ldHJ5L2FwaSc7XG5pbXBvcnQgeyBnbG9iYWxFcnJvckhhbmRsZXIgfSBmcm9tICdAb3BlbnRlbGVtZXRyeS9jb3JlJztcbmltcG9ydCB7IEFsd2F5c09mZlNhbXBsZXIgfSBmcm9tICcuL0Fsd2F5c09mZlNhbXBsZXInO1xuaW1wb3J0IHsgQWx3YXlzT25TYW1wbGVyIH0gZnJvbSAnLi9BbHdheXNPblNhbXBsZXInO1xuLyoqXG4gKiBBIGNvbXBvc2l0ZSBzYW1wbGVyIHRoYXQgZWl0aGVyIHJlc3BlY3RzIHRoZSBwYXJlbnQgc3BhbidzIHNhbXBsaW5nIGRlY2lzaW9uXG4gKiBvciBkZWxlZ2F0ZXMgdG8gYGRlbGVnYXRlU2FtcGxlcmAgZm9yIHJvb3Qgc3BhbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJlbnRCYXNlZFNhbXBsZXIge1xuICAgIF9yb290O1xuICAgIF9yZW1vdGVQYXJlbnRTYW1wbGVkO1xuICAgIF9yZW1vdGVQYXJlbnROb3RTYW1wbGVkO1xuICAgIF9sb2NhbFBhcmVudFNhbXBsZWQ7XG4gICAgX2xvY2FsUGFyZW50Tm90U2FtcGxlZDtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgdGhpcy5fcm9vdCA9IGNvbmZpZy5yb290O1xuICAgICAgICBpZiAoIXRoaXMuX3Jvb3QpIHtcbiAgICAgICAgICAgIGdsb2JhbEVycm9ySGFuZGxlcihuZXcgRXJyb3IoJ1BhcmVudEJhc2VkU2FtcGxlciBtdXN0IGhhdmUgYSByb290IHNhbXBsZXIgY29uZmlndXJlZCcpKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3QgPSBuZXcgQWx3YXlzT25TYW1wbGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVtb3RlUGFyZW50U2FtcGxlZCA9XG4gICAgICAgICAgICBjb25maWcucmVtb3RlUGFyZW50U2FtcGxlZCA/PyBuZXcgQWx3YXlzT25TYW1wbGVyKCk7XG4gICAgICAgIHRoaXMuX3JlbW90ZVBhcmVudE5vdFNhbXBsZWQgPVxuICAgICAgICAgICAgY29uZmlnLnJlbW90ZVBhcmVudE5vdFNhbXBsZWQgPz8gbmV3IEFsd2F5c09mZlNhbXBsZXIoKTtcbiAgICAgICAgdGhpcy5fbG9jYWxQYXJlbnRTYW1wbGVkID1cbiAgICAgICAgICAgIGNvbmZpZy5sb2NhbFBhcmVudFNhbXBsZWQgPz8gbmV3IEFsd2F5c09uU2FtcGxlcigpO1xuICAgICAgICB0aGlzLl9sb2NhbFBhcmVudE5vdFNhbXBsZWQgPVxuICAgICAgICAgICAgY29uZmlnLmxvY2FsUGFyZW50Tm90U2FtcGxlZCA/PyBuZXcgQWx3YXlzT2ZmU2FtcGxlcigpO1xuICAgIH1cbiAgICBzaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcykge1xuICAgICAgICBjb25zdCBwYXJlbnRDb250ZXh0ID0gdHJhY2UuZ2V0U3BhbkNvbnRleHQoY29udGV4dCk7XG4gICAgICAgIGlmICghcGFyZW50Q29udGV4dCB8fCAhaXNTcGFuQ29udGV4dFZhbGlkKHBhcmVudENvbnRleHQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcm9vdC5zaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudENvbnRleHQuaXNSZW1vdGUpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnRDb250ZXh0LnRyYWNlRmxhZ3MgJiBUcmFjZUZsYWdzLlNBTVBMRUQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3RlUGFyZW50U2FtcGxlZC5zaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVtb3RlUGFyZW50Tm90U2FtcGxlZC5zaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudENvbnRleHQudHJhY2VGbGFncyAmIFRyYWNlRmxhZ3MuU0FNUExFRCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsUGFyZW50U2FtcGxlZC5zaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsUGFyZW50Tm90U2FtcGxlZC5zaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCwgc3Bhbk5hbWUsIHNwYW5LaW5kLCBhdHRyaWJ1dGVzLCBsaW5rcyk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFBhcmVudEJhc2Vke3Jvb3Q9JHt0aGlzLl9yb290LnRvU3RyaW5nKCl9LCByZW1vdGVQYXJlbnRTYW1wbGVkPSR7dGhpcy5fcmVtb3RlUGFyZW50U2FtcGxlZC50b1N0cmluZygpfSwgcmVtb3RlUGFyZW50Tm90U2FtcGxlZD0ke3RoaXMuX3JlbW90ZVBhcmVudE5vdFNhbXBsZWQudG9TdHJpbmcoKX0sIGxvY2FsUGFyZW50U2FtcGxlZD0ke3RoaXMuX2xvY2FsUGFyZW50U2FtcGxlZC50b1N0cmluZygpfSwgbG9jYWxQYXJlbnROb3RTYW1wbGVkPSR7dGhpcy5fbG9jYWxQYXJlbnROb3RTYW1wbGVkLnRvU3RyaW5nKCl9fWA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFyZW50QmFzZWRTYW1wbGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceIdRatioBasedSampler: () => (/* binding */ TraceIdRatioBasedSampler)\n/* harmony export */ });\n/* harmony import */ var _opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @opentelemetry/api */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js\");\n/* harmony import */ var _Sampler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Sampler */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nclass TraceIdRatioBasedSampler {\n    _ratio;\n    _upperBound;\n    constructor(_ratio = 0) {\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    shouldSample(context, traceId) {\n        return {\n            decision: (0,_opentelemetry_api__WEBPACK_IMPORTED_MODULE_0__.isValidTraceId)(traceId) && this._accumulate(traceId) < this._upperBound\n                ? _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.RECORD_AND_SAMPLED\n                : _Sampler__WEBPACK_IMPORTED_MODULE_1__.SamplingDecision.NOT_RECORD,\n        };\n    }\n    toString() {\n        return `TraceIdRatioBased{${this._ratio}}`;\n    }\n    _normalize(ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    }\n    _accumulate(traceId) {\n        let accumulation = 0;\n        for (let i = 0; i < traceId.length / 8; i++) {\n            const pos = i * 8;\n            const part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    }\n}\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vc2FtcGxlci9UcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EO0FBQ047QUFDOUM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrRUFBYztBQUNwQyxrQkFBa0Isc0RBQWdCO0FBQ2xDLGtCQUFrQixzREFBZ0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLEVBQUUsYUFBYTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdCQUF3QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZpc2hMYXBcXEN1cmU4XFxub2RlX21vZHVsZXNcXC5wbnBtXFxAb3BlbnRlbGVtZXRyeStzZGstdHJhY2UtYmFzZUAyLjEuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBcXG5vZGVfbW9kdWxlc1xcQG9wZW50ZWxlbWV0cnlcXHNkay10cmFjZS1iYXNlXFxidWlsZFxcZXNtXFxzYW1wbGVyXFxUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmltcG9ydCB7IGlzVmFsaWRUcmFjZUlkIH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvYXBpJztcbmltcG9ydCB7IFNhbXBsaW5nRGVjaXNpb24gfSBmcm9tICcuLi9TYW1wbGVyJztcbi8qKiBTYW1wbGVyIHRoYXQgc2FtcGxlcyBhIGdpdmVuIGZyYWN0aW9uIG9mIHRyYWNlcyBiYXNlZCBvZiB0cmFjZSBpZCBkZXRlcm1pbmlzdGljYWxseS4gKi9cbmV4cG9ydCBjbGFzcyBUcmFjZUlkUmF0aW9CYXNlZFNhbXBsZXIge1xuICAgIF9yYXRpbztcbiAgICBfdXBwZXJCb3VuZDtcbiAgICBjb25zdHJ1Y3RvcihfcmF0aW8gPSAwKSB7XG4gICAgICAgIHRoaXMuX3JhdGlvID0gX3JhdGlvO1xuICAgICAgICB0aGlzLl9yYXRpbyA9IHRoaXMuX25vcm1hbGl6ZShfcmF0aW8pO1xuICAgICAgICB0aGlzLl91cHBlckJvdW5kID0gTWF0aC5mbG9vcih0aGlzLl9yYXRpbyAqIDB4ZmZmZmZmZmYpO1xuICAgIH1cbiAgICBzaG91bGRTYW1wbGUoY29udGV4dCwgdHJhY2VJZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVjaXNpb246IGlzVmFsaWRUcmFjZUlkKHRyYWNlSWQpICYmIHRoaXMuX2FjY3VtdWxhdGUodHJhY2VJZCkgPCB0aGlzLl91cHBlckJvdW5kXG4gICAgICAgICAgICAgICAgPyBTYW1wbGluZ0RlY2lzaW9uLlJFQ09SRF9BTkRfU0FNUExFRFxuICAgICAgICAgICAgICAgIDogU2FtcGxpbmdEZWNpc2lvbi5OT1RfUkVDT1JELFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBUcmFjZUlkUmF0aW9CYXNlZHske3RoaXMuX3JhdGlvfX1gO1xuICAgIH1cbiAgICBfbm9ybWFsaXplKHJhdGlvKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmF0aW8gIT09ICdudW1iZXInIHx8IGlzTmFOKHJhdGlvKSlcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICByZXR1cm4gcmF0aW8gPj0gMSA/IDEgOiByYXRpbyA8PSAwID8gMCA6IHJhdGlvO1xuICAgIH1cbiAgICBfYWNjdW11bGF0ZSh0cmFjZUlkKSB7XG4gICAgICAgIGxldCBhY2N1bXVsYXRpb24gPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYWNlSWQubGVuZ3RoIC8gODsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb3MgPSBpICogODtcbiAgICAgICAgICAgIGNvbnN0IHBhcnQgPSBwYXJzZUludCh0cmFjZUlkLnNsaWNlKHBvcywgcG9zICsgOCksIDE2KTtcbiAgICAgICAgICAgIGFjY3VtdWxhdGlvbiA9IChhY2N1bXVsYXRpb24gXiBwYXJ0KSA+Pj4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjdW11bGF0aW9uO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYWNlSWRSYXRpb0Jhc2VkU2FtcGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ATTRIBUTE_COUNT_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_COUNT_LIMIT),\n/* harmony export */   DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT: () => (/* binding */ DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT),\n/* harmony export */   mergeConfig: () => (/* binding */ mergeConfig),\n/* harmony export */   reconfigureLimits: () => (/* binding */ reconfigureLimits)\n/* harmony export */ });\n/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js\");\n/* harmony import */ var _opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @opentelemetry/core */ \"(rsc)/./node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/platform/node/environment.js\");\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nconst DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nfunction mergeConfig(userConfig) {\n    const perInstanceDefaults = {\n        sampler: (0,_config__WEBPACK_IMPORTED_MODULE_0__.buildSamplerFromEnv)(),\n    };\n    const DEFAULT_CONFIG = (0,_config__WEBPACK_IMPORTED_MODULE_0__.loadDefaultConfig)();\n    const target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nfunction reconfigureLimits(userConfig) {\n    const spanLimits = Object.assign({}, userConfig.spanLimits);\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        userConfig.spanLimits?.attributeCountLimit ??\n            userConfig.generalLimits?.attributeCountLimit ??\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT') ??\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getNumberFromEnv)('OTEL_ATTRIBUTE_COUNT_LIMIT') ??\n            DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        userConfig.spanLimits?.attributeValueLengthLimit ??\n            userConfig.generalLimits?.attributeValueLengthLimit ??\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getNumberFromEnv)('OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            (0,_opentelemetry_core__WEBPACK_IMPORTED_MODULE_1__.getNumberFromEnv)('OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT') ??\n            DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits });\n}\n//# sourceMappingURL=utility.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9zZGstdHJhY2UtYmFzZS9idWlsZC9lc20vdXRpbGl0eS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0U7QUFDWDtBQUNoRDtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsaUJBQWlCLDREQUFtQjtBQUNwQztBQUNBLDJCQUEyQiwwREFBaUI7QUFDNUMsbUNBQW1DO0FBQ25DLDJDQUEyQyw4REFBOEQ7QUFDekcsd0NBQXdDLHdEQUF3RDtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUVBQWdCO0FBQzVCLFlBQVkscUVBQWdCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxxRUFBZ0I7QUFDNUIsWUFBWSxxRUFBZ0I7QUFDNUI7QUFDQSwyQkFBMkIsZ0JBQWdCLFlBQVk7QUFDdkQ7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWaXNoTGFwXFxDdXJlOFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG9wZW50ZWxlbWV0cnkrc2RrLXRyYWNlLWJhc2VAMi4xLjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wXFxub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XFxzZGstdHJhY2UtYmFzZVxcYnVpbGRcXGVzbVxcdXRpbGl0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuaW1wb3J0IHsgYnVpbGRTYW1wbGVyRnJvbUVudiwgbG9hZERlZmF1bHRDb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBnZXROdW1iZXJGcm9tRW52IH0gZnJvbSAnQG9wZW50ZWxlbWV0cnkvY29yZSc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9BVFRSSUJVVEVfQ09VTlRfTElNSVQgPSAxMjg7XG5leHBvcnQgY29uc3QgREVGQVVMVF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUID0gSW5maW5pdHk7XG4vKipcbiAqIEZ1bmN0aW9uIHRvIG1lcmdlIERlZmF1bHQgY29uZmlndXJhdGlvbiAoYXMgc3BlY2lmaWVkIGluICcuL2NvbmZpZycpIHdpdGhcbiAqIHVzZXIgcHJvdmlkZWQgY29uZmlndXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNvbmZpZyh1c2VyQ29uZmlnKSB7XG4gICAgY29uc3QgcGVySW5zdGFuY2VEZWZhdWx0cyA9IHtcbiAgICAgICAgc2FtcGxlcjogYnVpbGRTYW1wbGVyRnJvbUVudigpLFxuICAgIH07XG4gICAgY29uc3QgREVGQVVMVF9DT05GSUcgPSBsb2FkRGVmYXVsdENvbmZpZygpO1xuICAgIGNvbnN0IHRhcmdldCA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHLCBwZXJJbnN0YW5jZURlZmF1bHRzLCB1c2VyQ29uZmlnKTtcbiAgICB0YXJnZXQuZ2VuZXJhbExpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfQ09ORklHLmdlbmVyYWxMaW1pdHMsIHVzZXJDb25maWcuZ2VuZXJhbExpbWl0cyB8fCB7fSk7XG4gICAgdGFyZ2V0LnNwYW5MaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0NPTkZJRy5zcGFuTGltaXRzLCB1c2VyQ29uZmlnLnNwYW5MaW1pdHMgfHwge30pO1xuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vKipcbiAqIFdoZW4gZ2VuZXJhbCBsaW1pdHMgYXJlIHByb3ZpZGVkIGFuZCBtb2RlbCBzcGVjaWZpYyBsaW1pdHMgYXJlIG5vdCxcbiAqIGNvbmZpZ3VyZXMgdGhlIG1vZGVsIHNwZWNpZmljIGxpbWl0cyBieSB1c2luZyB0aGUgdmFsdWVzIGZyb20gdGhlIGdlbmVyYWwgb25lcy5cbiAqIEBwYXJhbSB1c2VyQ29uZmlnIFVzZXIgcHJvdmlkZWQgdHJhY2VyIGNvbmZpZ3VyYXRpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29uZmlndXJlTGltaXRzKHVzZXJDb25maWcpIHtcbiAgICBjb25zdCBzcGFuTGltaXRzID0gT2JqZWN0LmFzc2lnbih7fSwgdXNlckNvbmZpZy5zcGFuTGltaXRzKTtcbiAgICAvKipcbiAgICAgKiBSZWFzc2lnbiBzcGFuIGF0dHJpYnV0ZSBjb3VudCBsaW1pdCB0byB1c2UgZmlyc3Qgbm9uIG51bGwgdmFsdWUgZGVmaW5lZCBieSB1c2VyIG9yIHVzZSBkZWZhdWx0IHZhbHVlXG4gICAgICovXG4gICAgc3BhbkxpbWl0cy5hdHRyaWJ1dGVDb3VudExpbWl0ID1cbiAgICAgICAgdXNlckNvbmZpZy5zcGFuTGltaXRzPy5hdHRyaWJ1dGVDb3VudExpbWl0ID8/XG4gICAgICAgICAgICB1c2VyQ29uZmlnLmdlbmVyYWxMaW1pdHM/LmF0dHJpYnV0ZUNvdW50TGltaXQgPz9cbiAgICAgICAgICAgIGdldE51bWJlckZyb21FbnYoJ09URUxfU1BBTl9BVFRSSUJVVEVfQ09VTlRfTElNSVQnKSA/P1xuICAgICAgICAgICAgZ2V0TnVtYmVyRnJvbUVudignT1RFTF9BVFRSSUJVVEVfQ09VTlRfTElNSVQnKSA/P1xuICAgICAgICAgICAgREVGQVVMVF9BVFRSSUJVVEVfQ09VTlRfTElNSVQ7XG4gICAgLyoqXG4gICAgICogUmVhc3NpZ24gc3BhbiBhdHRyaWJ1dGUgdmFsdWUgbGVuZ3RoIGxpbWl0IHRvIHVzZSBmaXJzdCBub24gbnVsbCB2YWx1ZSBkZWZpbmVkIGJ5IHVzZXIgb3IgdXNlIGRlZmF1bHQgdmFsdWVcbiAgICAgKi9cbiAgICBzcGFuTGltaXRzLmF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQgPVxuICAgICAgICB1c2VyQ29uZmlnLnNwYW5MaW1pdHM/LmF0dHJpYnV0ZVZhbHVlTGVuZ3RoTGltaXQgPz9cbiAgICAgICAgICAgIHVzZXJDb25maWcuZ2VuZXJhbExpbWl0cz8uYXR0cmlidXRlVmFsdWVMZW5ndGhMaW1pdCA/P1xuICAgICAgICAgICAgZ2V0TnVtYmVyRnJvbUVudignT1RFTF9TUEFOX0FUVFJJQlVURV9WQUxVRV9MRU5HVEhfTElNSVQnKSA/P1xuICAgICAgICAgICAgZ2V0TnVtYmVyRnJvbUVudignT1RFTF9BVFRSSUJVVEVfVkFMVUVfTEVOR1RIX0xJTUlUJykgPz9cbiAgICAgICAgICAgIERFRkFVTFRfQVRUUklCVVRFX1ZBTFVFX0xFTkdUSF9MSU1JVDtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgdXNlckNvbmZpZywgeyBzcGFuTGltaXRzIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbGl0eS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@opentelemetry+sdk-trace-base@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js\n");

/***/ })

};
;